GAS LISTING /tmp/ccvMAa46.s 			page 1


   1               		.file	"rev2.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/ffg/DATA/Electronics/Projects/SPS201/Firmware/",100,0,2,.Ltext0
   8               		.stabs	"rev2.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"void:t(0,15)=(0,15)",128,0,0,0
  27               		.stabs	"rev2.h",130,0,0,0
  28               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/io.h",130,0,0,0
  29               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  30               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/inttypes.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.7.2/include/stdint.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdint.h",130,0,0,0
  33               		.stabs	"int8_t:t(6,1)=(0,10)",128,0,121,0
  34               		.stabs	"uint8_t:t(6,2)=(0,11)",128,0,122,0
  35               		.stabs	"int16_t:t(6,3)=(0,1)",128,0,123,0
  36               		.stabs	"uint16_t:t(6,4)=(0,4)",128,0,124,0
  37               		.stabs	"int32_t:t(6,5)=(0,3)",128,0,125,0
  38               		.stabs	"uint32_t:t(6,6)=(0,5)",128,0,126,0
  39               		.stabs	"int64_t:t(6,7)=(0,6)",128,0,128,0
  40               		.stabs	"uint64_t:t(6,8)=(0,7)",128,0,129,0
  41               		.stabs	"intptr_t:t(6,9)=(6,3)",128,0,142,0
  42               		.stabs	"uintptr_t:t(6,10)=(6,4)",128,0,147,0
  43               		.stabs	"int_least8_t:t(6,11)=(6,1)",128,0,159,0
  44               		.stabs	"uint_least8_t:t(6,12)=(6,2)",128,0,164,0
  45               		.stabs	"int_least16_t:t(6,13)=(6,3)",128,0,169,0
  46               		.stabs	"uint_least16_t:t(6,14)=(6,4)",128,0,174,0
  47               		.stabs	"int_least32_t:t(6,15)=(6,5)",128,0,179,0
  48               		.stabs	"uint_least32_t:t(6,16)=(6,6)",128,0,184,0
  49               		.stabs	"int_least64_t:t(6,17)=(6,7)",128,0,192,0
  50               		.stabs	"uint_least64_t:t(6,18)=(6,8)",128,0,199,0
  51               		.stabs	"int_fast8_t:t(6,19)=(6,1)",128,0,213,0
  52               		.stabs	"uint_fast8_t:t(6,20)=(6,2)",128,0,218,0
  53               		.stabs	"int_fast16_t:t(6,21)=(6,3)",128,0,223,0
  54               		.stabs	"uint_fast16_t:t(6,22)=(6,4)",128,0,228,0
  55               		.stabs	"int_fast32_t:t(6,23)=(6,5)",128,0,233,0
  56               		.stabs	"uint_fast32_t:t(6,24)=(6,6)",128,0,238,0
  57               		.stabs	"int_fast64_t:t(6,25)=(6,7)",128,0,246,0
GAS LISTING /tmp/ccvMAa46.s 			page 2


  58               		.stabs	"uint_fast64_t:t(6,26)=(6,8)",128,0,253,0
  59               		.stabs	"intmax_t:t(6,27)=(6,7)",128,0,273,0
  60               		.stabs	"uintmax_t:t(6,28)=(6,8)",128,0,278,0
  61               		.stabn	162,0,0,0
  62               		.stabn	162,0,0,0
  63               		.stabs	"int_farptr_t:t(4,1)=(6,5)",128,0,77,0
  64               		.stabs	"uint_farptr_t:t(4,2)=(6,6)",128,0,81,0
  65               		.stabn	162,0,0,0
  66               		.stabn	162,0,0,0
  67               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/fuse.h",130,0,0,0
  68               		.stabs	"__fuse_t:t(7,1)=(7,2)=s2low:(0,11),0,8;high:(0,11),8,8;;",128,0,252,0
  69               		.stabn	162,0,0,0
  70               		.stabn	162,0,0,0
  71               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdio.h",130,0,0,0
  72               		.stabs	"/usr/lib/gcc/avr/4.7.2/include/stdarg.h",130,0,0,0
  73               		.stabs	"__gnuc_va_list:t(9,1)=(9,2)=*(0,15)",128,0,40,0
  74               		.stabs	"va_list:t(9,3)=(9,1)",128,0,102,0
  75               		.stabn	162,0,0,0
  76               		.stabs	"/usr/lib/gcc/avr/4.7.2/include/stddef.h",130,0,0,0
  77               		.stabs	"size_t:t(10,1)=(0,4)",128,0,213,0
  78               		.stabn	162,0,0,0
  79               		.stabs	"__file:T(8,1)=s14buf:(8,2)=*(0,2),0,16;unget:(0,11),16,8;flags:(6,2),24,8;size:(0,1),32,16
  80               		.stabn	162,0,0,0
  81               		.stabn	162,0,0,0
  82               		.stabs	"transferToDAC:F(0,15)",36,0,329,transferToDAC
  83               		.stabs	"CTRL:P(0,11)",64,0,329,24
  84               		.stabs	"a:P(6,4)",64,0,329,22
  85               	.global	transferToDAC
  86               		.type	transferToDAC, @function
  87               	transferToDAC:
  88               		.stabd	46,0,0
   1:rev2.c        **** /************************************
   2:rev2.c        **** *									*
   3:rev2.c        **** *		DIGITAL PSU REV 2			*			
   4:rev2.c        **** *		Fridrik F Gautason			*
   5:rev2.c        **** *		Copyright 2013				*
   6:rev2.c        **** *									*
   7:rev2.c        **** ************************************/
   8:rev2.c        **** 
   9:rev2.c        **** #include "rev2.h"
  10:rev2.c        **** 
  11:rev2.c        **** uint8_t backlight = 10;
  12:rev2.c        **** 
  13:rev2.c        **** int main(void)
  14:rev2.c        **** {
  15:rev2.c        **** 	DDRB = 0;
  16:rev2.c        **** 	DDRC = 0;
  17:rev2.c        **** 	DDRD = 0;
  18:rev2.c        **** 
  19:rev2.c        **** 	// Initialize the Switches and encoder
  20:rev2.c        **** 	SW_Initialize();
  21:rev2.c        **** 	
  22:rev2.c        **** 	// DAC
  23:rev2.c        **** 	DDRD |= 1 << PD7;	// DAC chip select
  24:rev2.c        **** 	DESELECT_DAC;
  25:rev2.c        **** 
  26:rev2.c        **** 	// Output relay
GAS LISTING /tmp/ccvMAa46.s 			page 3


  27:rev2.c        **** 	DDRB |= 1 << PB0;	// Output enable
  28:rev2.c        **** 	DISABLE_OUTPUT;
  29:rev2.c        **** 
  30:rev2.c        **** 	// SPI interface to DAC and DISPLAY
  31:rev2.c        **** 	DDRB |= 1 << PB3;	// SPI MOSI
  32:rev2.c        **** 	DDRB |= 1 << PB5;	// SPI SCK
  33:rev2.c        **** 	// Enable SPI, Master, set clock rate fck/16
  34:rev2.c        **** 	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  35:rev2.c        **** 
  36:rev2.c        **** 	// Setting up OC1 which is the PWM module for
  37:rev2.c        **** 	// charge pump and backlight. The charge pump is 
  38:rev2.c        **** 	// always set on half duty cycle while backlight is 
  39:rev2.c        **** 	// controlled by the user.
  40:rev2.c        **** 	DDRB |= 1 << PB1;							// Charge pump
  41:rev2.c        **** 	DDRB |= 1 << PB2;							// Backlight
  42:rev2.c        **** 	TCCR1A  = (1 << COM1A1) | (1 << COM1B1);	// Enable both osc
  43:rev2.c        **** 	TCCR1A |= (1 << WGM10) | (1 << WGM12);		// FAST 8 bit PWM
  44:rev2.c        **** 	OCR1A = 0x80;								// charge pump 128
  45:rev2.c        **** 	OCR1B = backlight*19;						// Backlight
  46:rev2.c        **** 	TCCR1B = (1 << CS10);						// START no prescaler
  47:rev2.c        **** 	
  48:rev2.c        **** 	// A wanky opening screen
  49:rev2.c        **** 	LCD_Initialize();
  50:rev2.c        **** 	LCD_Cursor(0,4);
  51:rev2.c        **** 	LCD_Write("digital");
  52:rev2.c        **** 	LCD_Cursor(1,6);
  53:rev2.c        **** 	LCD_Write("PSU");
  54:rev2.c        **** 	_delay_ms(1000);
  55:rev2.c        **** 	LCD_Clear();
  56:rev2.c        **** 
  57:rev2.c        **** 	// Voltage and current read variables
  58:rev2.c        **** 	uint16_t voltageRead = 0;
  59:rev2.c        **** 	uint16_t voltageAveraging = 0;
  60:rev2.c        **** 	uint16_t currentRead = 0;
  61:rev2.c        **** 	uint16_t currentAveraging = 0;
  62:rev2.c        **** 	uint16_t preregRead = 0;
  63:rev2.c        **** 	uint16_t preregAveraging = 0;
  64:rev2.c        **** 	uint16_t vinRead = 0;
  65:rev2.c        **** 	uint16_t vinAveraging = 0;
  66:rev2.c        **** 	unsigned char cVoltageRead [10];
  67:rev2.c        **** 	mapVoltage(voltageRead,cVoltageRead);
  68:rev2.c        **** 	unsigned char cCurrentRead [10];
  69:rev2.c        **** 	mapCurrent(currentRead,cCurrentRead);
  70:rev2.c        **** 	int numReadAverages = 5; // MAX 60!
  71:rev2.c        **** 	int readCounter = numReadAverages;
  72:rev2.c        **** 
  73:rev2.c        **** 	// Voltage and current set variables
  74:rev2.c        **** 	uint16_t voltageSet = 0;
  75:rev2.c        **** 	uint16_t currentSet = 0;
  76:rev2.c        **** 	unsigned char cVoltageSet [10];
  77:rev2.c        **** 	mapVoltage(voltageSet,cVoltageSet);
  78:rev2.c        **** 	unsigned char cCurrentSet [10];
  79:rev2.c        **** 	mapCurrent(currentSet,cCurrentSet);
  80:rev2.c        **** 
  81:rev2.c        **** 
  82:rev2.c        **** 	// Delay variables, because we want to show the
  83:rev2.c        **** 	// set varibles for some while before we show the 
GAS LISTING /tmp/ccvMAa46.s 			page 4


  84:rev2.c        **** 	// readback.
  85:rev2.c        **** 	uint16_t setDelay = 0;
  86:rev2.c        **** 	uint16_t numDelayCycles = 50000;
  87:rev2.c        **** 
  88:rev2.c        **** 	// Calibration variables
  89:rev2.c        **** 	float voltageRef = 498.8;	// The ref voltage times 100
  90:rev2.c        **** 	float voltageSetMulti = 4.7*voltageRef/1024;	// gain*ref/numBits
  91:rev2.c        **** 	float voltageReadMulti = 5.7*voltageRef/1024;
  92:rev2.c        **** 	float currentSetMulti = 1/0.33/11*voltageRef/1024;
  93:rev2.c        **** 	float currentReadMulti = 1/0.33/11*voltageRef/1024;
  94:rev2.c        **** 
  95:rev2.c        **** 	// Start the ADC
  96:rev2.c        **** 	ADC_initialize();
  97:rev2.c        **** 	ADC_STARTCONVERSION;
  98:rev2.c        **** 	sei();
  99:rev2.c        **** 
 100:rev2.c        **** 	// Start the USB interface
 101:rev2.c        **** 	USART_Initialize();
 102:rev2.c        **** 
 103:rev2.c        **** 	MENU_Home(cVoltageSet,cCurrentSet);
 104:rev2.c        **** 	LCD_HighLight();
 105:rev2.c        **** 
 106:rev2.c        **** 	/************************
 107:rev2.c        **** 	*						*
 108:rev2.c        **** 	*		MAIN LOOP		*
 109:rev2.c        **** 	*						*
 110:rev2.c        **** 	************************/
 111:rev2.c        **** 
 112:rev2.c        **** 	while(1)
 113:rev2.c        ****     {
 114:rev2.c        **** 		// If Sw1 is pressed, toggle the output
 115:rev2.c        **** 		if (SW_Check1())
 116:rev2.c        **** 		{
 117:rev2.c        **** 			if(OUTPUT_IS_ENABLED)
 118:rev2.c        **** 			{
 119:rev2.c        **** 				DISABLE_OUTPUT;
 120:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 121:rev2.c        **** 			}
 122:rev2.c        **** 			else
 123:rev2.c        **** 			{
 124:rev2.c        **** 				ENABLE_OUTPUT;
 125:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 126:rev2.c        **** 			}
 127:rev2.c        **** 		}
 128:rev2.c        **** 
 129:rev2.c        **** 		// If Sw2 is pressed, let the encoder control the backlight
 130:rev2.c        **** 		if (SW_Check2())
 131:rev2.c        **** 		{
 132:rev2.c        **** 			// Go into backlight setting
 133:rev2.c        **** 			MENU_Backlight();
 134:rev2.c        **** 			MENU_Home(cVoltageRead,cCurrentRead);
 135:rev2.c        **** 		}
 136:rev2.c        **** 
 137:rev2.c        **** 		// IF Sw4 is pressed, toggle the encoder
 138:rev2.c        **** 		if (SW_Check4())
 139:rev2.c        **** 		{
 140:rev2.c        **** 			switch(encoderControls)
GAS LISTING /tmp/ccvMAa46.s 			page 5


 141:rev2.c        **** 			{
 142:rev2.c        **** 			case VOLTAGE:
 143:rev2.c        **** 				encoderControls = CURRENT;
 144:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 145:rev2.c        **** 				break;
 146:rev2.c        **** 			case CURRENT:
 147:rev2.c        **** 				encoderControls = VOLTAGE;
 148:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 149:rev2.c        **** 				break;
 150:rev2.c        **** 			default:
 151:rev2.c        **** 				encoderControls = VOLTAGE;
 152:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 153:rev2.c        **** 				break;
 154:rev2.c        **** 			}
 155:rev2.c        **** 		}
 156:rev2.c        **** 
 157:rev2.c        **** 		
 158:rev2.c        **** 		// Rotary encoder
 159:rev2.c        **** 		unsigned char dir = SW_CheckEncoder();
 160:rev2.c        **** 		if(dir)
 161:rev2.c        **** 		{
 162:rev2.c        **** 			switch(encoderControls)
 163:rev2.c        **** 			{		
 164:rev2.c        **** 			case VOLTAGE:
 165:rev2.c        **** 				if(dir == ENCODER_CW)	voltageSet += 2;
 166:rev2.c        **** 				else 					voltageSet -= 2;
 167:rev2.c        **** 
 168:rev2.c        **** 				if(voltageSet > 60000)
 169:rev2.c        **** 					voltageSet = 0;
 170:rev2.c        **** 				else if(voltageSet > 2000)
 171:rev2.c        **** 					voltageSet = 2000;
 172:rev2.c        **** 
 173:rev2.c        **** 				transferToDAC(9,voltageSet/voltageSetMulti);
 174:rev2.c        **** 				mapVoltage(voltageSet,cVoltageSet);
 175:rev2.c        **** 				MENU_Home(cVoltageSet,cCurrentSet);
 176:rev2.c        **** 				// Set delay to keep displaying the set voltage
 177:rev2.c        **** 				// and current for some time
 178:rev2.c        **** 				setDelay = numDelayCycles;
 179:rev2.c        **** 				break;
 180:rev2.c        **** 			case CURRENT:
 181:rev2.c        **** 				if(dir == ENCODER_CW) 	currentSet += 1;
 182:rev2.c        **** 				else					currentSet -= 1;
 183:rev2.c        **** 
 184:rev2.c        **** 				if(currentSet > 60000)
 185:rev2.c        **** 					currentSet = 0;
 186:rev2.c        **** 				else if(currentSet > 100)
 187:rev2.c        **** 					currentSet = 100;
 188:rev2.c        **** 
 189:rev2.c        **** 				transferToDAC(10,currentSet/currentSetMulti);
 190:rev2.c        **** 				mapCurrent(currentSet,cCurrentSet);
 191:rev2.c        **** 				MENU_Home(cVoltageSet,cCurrentSet);
 192:rev2.c        **** 				setDelay = numDelayCycles;
 193:rev2.c        **** 				break;
 194:rev2.c        **** 			default:
 195:rev2.c        **** 				break;
 196:rev2.c        **** 			}
 197:rev2.c        **** 		}
GAS LISTING /tmp/ccvMAa46.s 			page 6


 198:rev2.c        **** 	
 199:rev2.c        **** 		// Reduce set delay by one
 200:rev2.c        **** 		if (setDelay > 0)
 201:rev2.c        **** 			setDelay--;
 202:rev2.c        **** 
 203:rev2.c        **** 		// When a new ADC reading is registered we display it
 204:rev2.c        **** 		if(ADC_status & ADC_NEWREADING)
 205:rev2.c        **** 		{
 206:rev2.c        **** 			ADC_status &= ~ADC_NEWREADING;
 207:rev2.c        **** 
 208:rev2.c        **** 			switch(ADC_status)
 209:rev2.c        **** 			{
 210:rev2.c        **** 			case ADC_VOLTAGE:
 211:rev2.c        **** 				voltageAveraging += ADC_reading;
 212:rev2.c        **** 				ADC_status = ADC_CURRENT;
 213:rev2.c        **** 				ADMUX &= 0xF0;
 214:rev2.c        **** 				ADMUX |= CURRENT_MON;
 215:rev2.c        **** 				break;
 216:rev2.c        **** 			case ADC_CURRENT:
 217:rev2.c        **** 				currentAveraging += ADC_reading;
 218:rev2.c        **** 				ADC_status = ADC_PREREGULATOR;
 219:rev2.c        **** 				ADMUX &= 0xF0;
 220:rev2.c        **** 				ADMUX |= PREREG;
 221:rev2.c        **** 				break;
 222:rev2.c        **** 			case ADC_PREREGULATOR:
 223:rev2.c        **** 				preregAveraging += ADC_reading;
 224:rev2.c        **** 				ADC_status = ADC_VIN;
 225:rev2.c        **** 				ADMUX &= 0xF0;
 226:rev2.c        **** 				ADMUX |= VIN_MON;
 227:rev2.c        **** 				break;
 228:rev2.c        **** 			case ADC_VIN:
 229:rev2.c        **** 				vinAveraging += ADC_reading;
 230:rev2.c        **** 				ADC_status = ADC_VOLTAGE;
 231:rev2.c        **** 				ADMUX &= 0xF0;
 232:rev2.c        **** 				ADMUX |= VOLTAGE_MON;
 233:rev2.c        **** 				// Only decrease the read counter here!
 234:rev2.c        **** 				readCounter--;
 235:rev2.c        **** 				break;
 236:rev2.c        **** 			default:
 237:rev2.c        **** 				ADC_status = ADC_VOLTAGE;
 238:rev2.c        **** 				ADMUX &= 0xF0;
 239:rev2.c        **** 				ADMUX |= VOLTAGE_MON;
 240:rev2.c        **** 				break;
 241:rev2.c        **** 			}
 242:rev2.c        **** 			// If we finish the averaging we rename the variables
 243:rev2.c        **** 			// and write to display.
 244:rev2.c        **** 			if (readCounter == 0)
 245:rev2.c        **** 			{
 246:rev2.c        **** 				readCounter = numReadAverages;
 247:rev2.c        **** 
 248:rev2.c        **** 				uint16_t oldVoltageRead = voltageRead;
 249:rev2.c        **** 				voltageRead = voltageAveraging/numReadAverages*voltageReadMulti;
 250:rev2.c        **** 				mapVoltage(voltageRead,cVoltageRead);
 251:rev2.c        **** 				voltageAveraging = 0;
 252:rev2.c        **** 				uint16_t oldCurrentRead = currentRead;
 253:rev2.c        **** 				currentRead = currentAveraging/numReadAverages*currentReadMulti;
 254:rev2.c        **** 				mapCurrent(currentRead,cCurrentRead);
GAS LISTING /tmp/ccvMAa46.s 			page 7


 255:rev2.c        **** 				currentAveraging = 0;
 256:rev2.c        **** 				preregRead = preregAveraging/numReadAverages*voltageReadMulti;
 257:rev2.c        **** 				preregAveraging = 0;
 258:rev2.c        **** 				vinRead = vinAveraging/numReadAverages*voltageReadMulti;
 259:rev2.c        **** 				vinAveraging = 0;
 260:rev2.c        **** 				if(voltageRead != oldVoltageRead || currentRead != oldCurrentRead)
 261:rev2.c        **** 				{
 262:rev2.c        **** 					MENU_Home(cVoltageRead,cCurrentRead);
 263:rev2.c        **** 				}
 264:rev2.c        **** 			}
 265:rev2.c        **** 			ADC_STARTCONVERSION;
 266:rev2.c        **** 		}
 267:rev2.c        **** 
 268:rev2.c        **** 
 269:rev2.c        **** 		// Listen for USB command
 270:rev2.c        **** 		unsigned char command = USART_RecieveCommand();
 271:rev2.c        **** 		uint16_t newData;
 272:rev2.c        **** 
 273:rev2.c        **** 		switch(command)
 274:rev2.c        **** 		{
 275:rev2.c        **** 		case USART_SEND_HANDSHAKE:
 276:rev2.c        **** 			USART_TransmitChar(USART_HANDSHAKE);
 277:rev2.c        **** 			break;
 278:rev2.c        **** 		case USART_RECEIVE_VOLTAGE:
 279:rev2.c        **** 			newData = USART_ReceiveData();
 280:rev2.c        **** 			if(newData > 2000)
 281:rev2.c        **** 				break;
 282:rev2.c        **** 			voltageSet = newData;
 283:rev2.c        **** 			transferToDAC(9,voltageSet/voltageSetMulti);
 284:rev2.c        **** 			mapVoltage(voltageSet,cVoltageSet);
 285:rev2.c        **** 			break;			
 286:rev2.c        **** 		case USART_SEND_VOLTAGE:
 287:rev2.c        **** 			USART_Transmit(voltageRead);
 288:rev2.c        **** 			break;
 289:rev2.c        **** 		case USART_SEND_SET_VOLTAGE:
 290:rev2.c        **** 			USART_Transmit(voltageSet);
 291:rev2.c        **** 			break;
 292:rev2.c        **** 		case USART_RECEIVE_CURRENT:
 293:rev2.c        **** 			newData = USART_ReceiveData();
 294:rev2.c        **** 			if(newData > 100)
 295:rev2.c        **** 				break;
 296:rev2.c        **** 			currentSet = newData;
 297:rev2.c        **** 			transferToDAC(10,currentSet/currentSetMulti);
 298:rev2.c        **** 			mapCurrent(currentSet,cCurrentSet);
 299:rev2.c        **** 			break;			
 300:rev2.c        **** 		case USART_SEND_CURRENT:
 301:rev2.c        **** 			USART_Transmit(currentRead);
 302:rev2.c        **** 			break;
 303:rev2.c        **** 		case USART_SEND_SET_CURRENT:
 304:rev2.c        **** 			USART_Transmit(currentSet);
 305:rev2.c        **** 			break;
 306:rev2.c        **** 		case USART_SEND_VIN:
 307:rev2.c        **** 			USART_Transmit(vinRead);
 308:rev2.c        **** 			break;
 309:rev2.c        **** 		case USART_SEND_VPREREG:
 310:rev2.c        **** 			USART_Transmit(preregRead);
 311:rev2.c        **** 			break;
GAS LISTING /tmp/ccvMAa46.s 			page 8


 312:rev2.c        **** 		case USART_ENABLE_OUTPUT:
 313:rev2.c        **** 			ENABLE_OUTPUT;
 314:rev2.c        **** 			MENU_Home(cVoltageRead,cCurrentRead);
 315:rev2.c        **** 			break;
 316:rev2.c        **** 		case USART_DISABLE_OUTPUT:
 317:rev2.c        **** 			DISABLE_OUTPUT;
 318:rev2.c        **** 			MENU_Home(cVoltageRead,cCurrentRead);
 319:rev2.c        **** 			break;
 320:rev2.c        **** 		default:
 321:rev2.c        **** 			break;
 322:rev2.c        **** 		}
 323:rev2.c        **** 	}
 324:rev2.c        **** }
 325:rev2.c        **** 
 326:rev2.c        **** // For the DAC (LTC1661) we must give one 16bit word 
 327:rev2.c        **** // first four bits are control code, the next eight 
 328:rev2.c        **** // are the actual data and the last two are ignored.
 329:rev2.c        **** void transferToDAC(unsigned char CTRL,uint16_t a){
  89               		.stabn	68,0,329,.LM0-.LFBB1
  90               	.LM0:
  91               	.LFBB1:
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
 330:rev2.c        ****   	// Make sure a is a ten bit word
 331:rev2.c        ****   	a &= 0x03FF;
  96               		.stabn	68,0,331,.LM1-.LFBB1
  97               	.LM1:
  98 0000 7370      		andi r23,3
 332:rev2.c        **** 	// Then shift up by two bits, the DAC does not
 333:rev2.c        **** 	// care about the two last bits!
 334:rev2.c        **** 	//a = a << 2; 
 335:rev2.c        **** 	// Shift the control code up by 4 bits
 336:rev2.c        **** 	CTRL = CTRL << 4;
 337:rev2.c        **** 
 338:rev2.c        **** 	// Now we can transfer this to the DAC
 339:rev2.c        ****   	// Take the DAC chip select low
 340:rev2.c        ****   	SELECT_DAC;
  99               		.stabn	68,0,340,.LM2-.LFBB1
 100               	.LM2:
 101 0002 9798      		cbi 0x12,7
 341:rev2.c        ****   	// Transfer in two 8 bit steps
 342:rev2.c        ****   	SPDR = CTRL | (a >> 6);
 102               		.stabn	68,0,342,.LM3-.LFBB1
 103               	.LM3:
 104 0004 9B01      		movw r18,r22
 105 0006 96E0      		ldi r25,6
 106               		1:
 107 0008 3695      		lsr r19
 108 000a 2795      		ror r18
 109 000c 9A95      		dec r25
 110 000e 01F4      		brne 1b
 336:rev2.c        **** 	CTRL = CTRL << 4;
 111               		.stabn	68,0,336,.LM4-.LFBB1
 112               	.LM4:
 113 0010 8295      		swap r24
GAS LISTING /tmp/ccvMAa46.s 			page 9


 114 0012 807F      		andi r24,lo8(-16)
 115               		.stabn	68,0,342,.LM5-.LFBB1
 116               	.LM5:
 117 0014 822B      		or r24,r18
 118 0016 8FB9      		out 0xf,r24
 119               	.L2:
 343:rev2.c        **** 	while(!(SPSR & (1<<SPIF)));
 120               		.stabn	68,0,343,.LM6-.LFBB1
 121               	.LM6:
 122 0018 779B      		sbis 0xe,7
 123 001a 00C0      		rjmp .L2
 344:rev2.c        **** 	SPDR = (a << 2) & 0x00FF;
 124               		.stabn	68,0,344,.LM7-.LFBB1
 125               	.LM7:
 126 001c 660F      		lsl r22
 127 001e 660F      		lsl r22
 128 0020 6FB9      		out 0xf,r22
 129               	.L3:
 345:rev2.c        **** 	while(!(SPSR & (1<<SPIF)));
 130               		.stabn	68,0,345,.LM8-.LFBB1
 131               	.LM8:
 132 0022 779B      		sbis 0xe,7
 133 0024 00C0      		rjmp .L3
 346:rev2.c        ****   	// Restore the chip select
 347:rev2.c        ****   	DESELECT_DAC;
 134               		.stabn	68,0,347,.LM9-.LFBB1
 135               	.LM9:
 136 0026 979A      		sbi 0x12,7
 137 0028 0895      		ret
 138               		.size	transferToDAC, .-transferToDAC
 139               	.Lscope1:
 140               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 141               		.stabd	78,0,0
 142               		.section	.rodata.str1.1,"aMS",@progbits,1
 143               	.LC0:
 144 0000 2532 692E 		.string	"%2i.%02i"
 144      2530 3269 
 144      00
 145               		.text
 146               		.stabs	"mapVoltage:F(0,15)",36,0,351,mapVoltage
 147               		.stabs	"volt:P(6,4)",64,0,351,30
 148               	.global	mapVoltage
 149               		.type	mapVoltage, @function
 150               	mapVoltage:
 151               		.stabd	46,0,0
 348:rev2.c        **** }
 349:rev2.c        **** 
 350:rev2.c        **** // store the numbers in chars
 351:rev2.c        **** void mapVoltage(uint16_t volt, unsigned char *b)
 352:rev2.c        **** {
 152               		.stabn	68,0,352,.LM10-.LFBB2
 153               	.LM10:
 154               	.LFBB2:
 155 002a CF93      		push r28
 156 002c DF93      		push r29
 157               	/* prologue: function */
 158               	/* frame size = 0 */
GAS LISTING /tmp/ccvMAa46.s 			page 10


 159               	/* stack size = 2 */
 160               	.L__stack_usage = 2
 161 002e FC01      		movw r30,r24
 162 0030 EB01      		movw r28,r22
 353:rev2.c        **** 	int wholeNum = volt/100;
 163               		.stabn	68,0,353,.LM11-.LFBB2
 164               	.LM11:
 165 0032 64E6      		ldi r22,lo8(100)
 166 0034 70E0      		ldi r23,0
 167 0036 00D0      		rcall __udivmodhi4
 168 0038 AB01      		movw r20,r22
 354:rev2.c        **** 	uint16_t fraction = volt - wholeNum*100;
 169               		.stabn	68,0,354,.LM12-.LFBB2
 170               	.LM12:
 171 003a 6CE9      		ldi r22,lo8(-100)
 172 003c 6403      		mulsu r22,r20
 173 003e 9001      		movw r18,r0
 174 0040 659F      		mul r22,r21
 175 0042 300D      		add r19,r0
 176 0044 1124      		clr __zero_reg__
 177 0046 2E0F      		add r18,r30
 178 0048 3F1F      		adc r19,r31
 355:rev2.c        **** 	
 356:rev2.c        **** 	sprintf(b,"%2i.%02i",wholeNum,fraction);
 179               		.stabn	68,0,356,.LM13-.LFBB2
 180               	.LM13:
 181 004a 3F93      		push r19
 182 004c 2F93      		push r18
 183 004e 5F93      		push r21
 184 0050 4F93      		push r20
 185 0052 80E0      		ldi r24,lo8(.LC0)
 186 0054 90E0      		ldi r25,hi8(.LC0)
 187 0056 9F93      		push r25
 188 0058 8F93      		push r24
 189 005a DF93      		push r29
 190 005c CF93      		push r28
 191 005e 00D0      		rcall sprintf
 192 0060 8DB7      		in r24,__SP_L__
 193 0062 9EB7      		in r25,__SP_H__
 194 0064 0896      		adiw r24,8
 195 0066 0FB6      		in __tmp_reg__,__SREG__
 196 0068 F894      		cli
 197 006a 9EBF      		out __SP_H__,r25
 198 006c 0FBE      		out __SREG__,__tmp_reg__
 199 006e 8DBF      		out __SP_L__,r24
 200               	/* epilogue start */
 357:rev2.c        **** }
 201               		.stabn	68,0,357,.LM14-.LFBB2
 202               	.LM14:
 203 0070 DF91      		pop r29
 204 0072 CF91      		pop r28
 205 0074 0895      		ret
 206               		.size	mapVoltage, .-mapVoltage
 207               	.Lscope2:
 208               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 209               		.stabd	78,0,0
 210               		.section	.rodata.str1.1
GAS LISTING /tmp/ccvMAa46.s 			page 11


 211               	.LC1:
 212 0009 2534 6930 		.string	"%4i0"
 212      00
 213               		.text
 214               		.stabs	"mapCurrent:F(0,15)",36,0,359,mapCurrent
 215               	.global	mapCurrent
 216               		.type	mapCurrent, @function
 217               	mapCurrent:
 218               		.stabd	46,0,0
 358:rev2.c        **** 
 359:rev2.c        **** void mapCurrent(uint16_t cur, unsigned char *b)
 360:rev2.c        **** {
 219               		.stabn	68,0,360,.LM15-.LFBB3
 220               	.LM15:
 221               	.LFBB3:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
 361:rev2.c        **** 	sprintf(b,"%4i0",cur);
 226               		.stabn	68,0,361,.LM16-.LFBB3
 227               	.LM16:
 228 0076 9F93      		push r25
 229 0078 8F93      		push r24
 230 007a 80E0      		ldi r24,lo8(.LC1)
 231 007c 90E0      		ldi r25,hi8(.LC1)
 232 007e 9F93      		push r25
 233 0080 8F93      		push r24
 234 0082 7F93      		push r23
 235 0084 6F93      		push r22
 236 0086 00D0      		rcall sprintf
 237 0088 0F90      		pop __tmp_reg__
 238 008a 0F90      		pop __tmp_reg__
 239 008c 0F90      		pop __tmp_reg__
 240 008e 0F90      		pop __tmp_reg__
 241 0090 0F90      		pop __tmp_reg__
 242 0092 0F90      		pop __tmp_reg__
 243 0094 0895      		ret
 244               		.size	mapCurrent, .-mapCurrent
 245               	.Lscope3:
 246               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 247               		.stabd	78,0,0
 248               		.section	.rodata.str1.1
 249               	.LC2:
 250 000e 563A 2000 		.string	"V: "
 251               	.LC3:
 252 0012 2056 00   		.string	" V"
 253               	.LC4:
 254 0015 493A 2000 		.string	"I: "
 255               	.LC5:
 256 0019 206D 4100 		.string	" mA"
 257               	.LC6:
 258 001d 7E00      		.string	"~"
 259               	.LC7:
 260 001f 4F4E 00   		.string	"ON"
 261               	.LC8:
 262 0022 4F46 4600 		.string	"OFF"
GAS LISTING /tmp/ccvMAa46.s 			page 12


 263               		.text
 264               		.stabs	"MENU_Home:F(0,15)",36,0,365,MENU_Home
 265               		.stabs	"voltage:P(0,16)=*(0,11)",64,0,365,28
 266               		.stabs	"current:P(0,16)",64,0,365,16
 267               	.global	MENU_Home
 268               		.type	MENU_Home, @function
 269               	MENU_Home:
 270               		.stabd	46,0,0
 362:rev2.c        **** }
 363:rev2.c        **** 
 364:rev2.c        **** 
 365:rev2.c        **** void MENU_Home(unsigned char* voltage,unsigned char* current)
 366:rev2.c        **** {
 271               		.stabn	68,0,366,.LM17-.LFBB4
 272               	.LM17:
 273               	.LFBB4:
 274 0096 0F93      		push r16
 275 0098 1F93      		push r17
 276 009a CF93      		push r28
 277 009c DF93      		push r29
 278               	/* prologue: function */
 279               	/* frame size = 0 */
 280               	/* stack size = 4 */
 281               	.L__stack_usage = 4
 282 009e EC01      		movw r28,r24
 283 00a0 8B01      		movw r16,r22
 367:rev2.c        **** 	// Write normal home screen
 368:rev2.c        **** 	LCD_Clear();
 284               		.stabn	68,0,368,.LM18-.LFBB4
 285               	.LM18:
 286 00a2 00D0      		rcall LCD_Clear
 369:rev2.c        **** 	LCD_Cursor(0,0);
 287               		.stabn	68,0,369,.LM19-.LFBB4
 288               	.LM19:
 289 00a4 60E0      		ldi r22,0
 290 00a6 80E0      		ldi r24,0
 291 00a8 00D0      		rcall LCD_Cursor
 370:rev2.c        **** 	LCD_Write("V: ");
 292               		.stabn	68,0,370,.LM20-.LFBB4
 293               	.LM20:
 294 00aa 80E0      		ldi r24,lo8(.LC2)
 295 00ac 90E0      		ldi r25,hi8(.LC2)
 296 00ae 00D0      		rcall LCD_Write
 371:rev2.c        **** 	LCD_Write(voltage);
 297               		.stabn	68,0,371,.LM21-.LFBB4
 298               	.LM21:
 299 00b0 CE01      		movw r24,r28
 300 00b2 00D0      		rcall LCD_Write
 372:rev2.c        **** 	LCD_Write(" V");
 301               		.stabn	68,0,372,.LM22-.LFBB4
 302               	.LM22:
 303 00b4 80E0      		ldi r24,lo8(.LC3)
 304 00b6 90E0      		ldi r25,hi8(.LC3)
 305 00b8 00D0      		rcall LCD_Write
 373:rev2.c        **** 	LCD_Cursor(1,0);
 306               		.stabn	68,0,373,.LM23-.LFBB4
 307               	.LM23:
GAS LISTING /tmp/ccvMAa46.s 			page 13


 308 00ba 60E0      		ldi r22,0
 309 00bc 81E0      		ldi r24,lo8(1)
 310 00be 00D0      		rcall LCD_Cursor
 374:rev2.c        **** 	LCD_Write("I: ");
 311               		.stabn	68,0,374,.LM24-.LFBB4
 312               	.LM24:
 313 00c0 80E0      		ldi r24,lo8(.LC4)
 314 00c2 90E0      		ldi r25,hi8(.LC4)
 315 00c4 00D0      		rcall LCD_Write
 375:rev2.c        **** 	LCD_Write(current);
 316               		.stabn	68,0,375,.LM25-.LFBB4
 317               	.LM25:
 318 00c6 C801      		movw r24,r16
 319 00c8 00D0      		rcall LCD_Write
 376:rev2.c        **** 	LCD_Write(" mA");
 320               		.stabn	68,0,376,.LM26-.LFBB4
 321               	.LM26:
 322 00ca 80E0      		ldi r24,lo8(.LC5)
 323 00cc 90E0      		ldi r25,hi8(.LC5)
 324 00ce 00D0      		rcall LCD_Write
 377:rev2.c        **** 
 378:rev2.c        **** 	// Determine the last selected encoder function
 379:rev2.c        **** 	switch(encoderControls)
 325               		.stabn	68,0,379,.LM27-.LFBB4
 326               	.LM27:
 327 00d0 8091 0000 		lds r24,encoderControls
 328 00d4 8130      		cpi r24,lo8(1)
 329 00d6 01F0      		breq .L15
 330 00d8 8230      		cpi r24,lo8(2)
 331 00da 01F4      		brne .L14
 380:rev2.c        **** 	{
 381:rev2.c        **** 	case VOLTAGE:
 382:rev2.c        **** 		LCD_Cursor(0,2);
 383:rev2.c        **** 		LCD_Write("~");
 384:rev2.c        **** 		break;
 385:rev2.c        **** 	case CURRENT:
 386:rev2.c        **** 		LCD_Cursor(1,2);
 332               		.stabn	68,0,386,.LM28-.LFBB4
 333               	.LM28:
 334 00dc 62E0      		ldi r22,lo8(2)
 335 00de 81E0      		ldi r24,lo8(1)
 336 00e0 00C0      		rjmp .L16
 337               	.L14:
 387:rev2.c        **** 		LCD_Write("~");
 388:rev2.c        **** 		break;
 389:rev2.c        **** 	default:
 390:rev2.c        **** 		encoderControls = VOLTAGE;
 338               		.stabn	68,0,390,.LM29-.LFBB4
 339               	.LM29:
 340 00e2 81E0      		ldi r24,lo8(1)
 341 00e4 8093 0000 		sts encoderControls,r24
 342               	.L15:
 391:rev2.c        **** 		LCD_Cursor(0,2);
 343               		.stabn	68,0,391,.LM30-.LFBB4
 344               	.LM30:
 345 00e8 62E0      		ldi r22,lo8(2)
 346 00ea 80E0      		ldi r24,0
GAS LISTING /tmp/ccvMAa46.s 			page 14


 347               	.L16:
 348 00ec 00D0      		rcall LCD_Cursor
 392:rev2.c        **** 		LCD_Write("~");
 349               		.stabn	68,0,392,.LM31-.LFBB4
 350               	.LM31:
 351 00ee 80E0      		ldi r24,lo8(.LC6)
 352 00f0 90E0      		ldi r25,hi8(.LC6)
 353 00f2 00D0      		rcall LCD_Write
 393:rev2.c        **** 		break;
 394:rev2.c        **** 	}
 395:rev2.c        **** 
 396:rev2.c        **** 	if(OUTPUT_IS_ENABLED)
 397:rev2.c        **** 	{
 398:rev2.c        **** 		LCD_Cursor(0,13);
 354               		.stabn	68,0,398,.LM32-.LFBB4
 355               	.LM32:
 356 00f4 6DE0      		ldi r22,lo8(13)
 357 00f6 80E0      		ldi r24,0
 396:rev2.c        **** 	if(OUTPUT_IS_ENABLED)
 358               		.stabn	68,0,396,.LM33-.LFBB4
 359               	.LM33:
 360 00f8 C09B      		sbis 0x18,0
 361 00fa 00C0      		rjmp .L13
 362               		.stabn	68,0,398,.LM34-.LFBB4
 363               	.LM34:
 364 00fc 00D0      		rcall LCD_Cursor
 399:rev2.c        **** 		LCD_Write("ON");
 365               		.stabn	68,0,399,.LM35-.LFBB4
 366               	.LM35:
 367 00fe 80E0      		ldi r24,lo8(.LC7)
 368 0100 90E0      		ldi r25,hi8(.LC7)
 369 0102 00C0      		rjmp .L17
 370               	.L13:
 400:rev2.c        **** 	}
 401:rev2.c        **** 	else
 402:rev2.c        **** 	{
 403:rev2.c        **** 		LCD_Cursor(0,13);
 371               		.stabn	68,0,403,.LM36-.LFBB4
 372               	.LM36:
 373 0104 00D0      		rcall LCD_Cursor
 404:rev2.c        **** 		LCD_Write("OFF");
 374               		.stabn	68,0,404,.LM37-.LFBB4
 375               	.LM37:
 376 0106 80E0      		ldi r24,lo8(.LC8)
 377 0108 90E0      		ldi r25,hi8(.LC8)
 378               	.L17:
 379               	/* epilogue start */
 405:rev2.c        **** 	}
 406:rev2.c        **** 
 407:rev2.c        **** }
 380               		.stabn	68,0,407,.LM38-.LFBB4
 381               	.LM38:
 382 010a DF91      		pop r29
 383 010c CF91      		pop r28
 384 010e 1F91      		pop r17
 385 0110 0F91      		pop r16
 404:rev2.c        **** 		LCD_Write("OFF");
GAS LISTING /tmp/ccvMAa46.s 			page 15


 386               		.stabn	68,0,404,.LM39-.LFBB4
 387               	.LM39:
 388 0112 00C0      		rjmp LCD_Write
 389               		.size	MENU_Home, .-MENU_Home
 390               	.Lscope4:
 391               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 392               		.stabd	78,0,0
 393               		.section	.rodata.str1.1
 394               	.LC9:
 395 0026 4261 636B 		.string	"Backlight"
 395      6C69 6768 
 395      7400 
 396               	.LC10:
 397 0030 5B20 2020 		.string	"[              ]"
 397      2020 2020 
 397      2020 2020 
 397      2020 205D 
 397      00
 398               	.LC11:
 399 0041 3D00      		.string	"="
 400               	.LC12:
 401 0043 3E00      		.string	">"
 402               		.text
 403               		.stabs	"MENU_Backlight:F(0,15)",36,0,409,MENU_Backlight
 404               	.global	MENU_Backlight
 405               		.type	MENU_Backlight, @function
 406               	MENU_Backlight:
 407               		.stabd	46,0,0
 408:rev2.c        **** 
 409:rev2.c        **** void MENU_Backlight(void)
 410:rev2.c        **** {
 408               		.stabn	68,0,410,.LM40-.LFBB5
 409               	.LM40:
 410               	.LFBB5:
 411 0114 CF93      		push r28
 412 0116 DF93      		push r29
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 2 */
 416               	.L__stack_usage = 2
 411:rev2.c        **** 	// Write small backlight screen
 412:rev2.c        **** 	LCD_Clear();
 417               		.stabn	68,0,412,.LM41-.LFBB5
 418               	.LM41:
 419 0118 00D0      		rcall LCD_Clear
 413:rev2.c        **** 	LCD_Cursor(0,3);
 420               		.stabn	68,0,413,.LM42-.LFBB5
 421               	.LM42:
 422 011a 63E0      		ldi r22,lo8(3)
 423 011c 80E0      		ldi r24,0
 424 011e 00D0      		rcall LCD_Cursor
 414:rev2.c        **** 	LCD_Write("Backlight");
 425               		.stabn	68,0,414,.LM43-.LFBB5
 426               	.LM43:
 427 0120 80E0      		ldi r24,lo8(.LC9)
 428 0122 90E0      		ldi r25,hi8(.LC9)
 429 0124 00D0      		rcall LCD_Write
GAS LISTING /tmp/ccvMAa46.s 			page 16


 415:rev2.c        **** 	LCD_Cursor(1,0);
 430               		.stabn	68,0,415,.LM44-.LFBB5
 431               	.LM44:
 432 0126 60E0      		ldi r22,0
 433 0128 81E0      		ldi r24,lo8(1)
 434 012a 00D0      		rcall LCD_Cursor
 416:rev2.c        **** 	LCD_Write("[              ]");
 435               		.stabn	68,0,416,.LM45-.LFBB5
 436               	.LM45:
 437 012c 80E0      		ldi r24,lo8(.LC10)
 438 012e 90E0      		ldi r25,hi8(.LC10)
 439 0130 00D0      		rcall LCD_Write
 417:rev2.c        **** 	LCD_Cursor(1,1);
 440               		.stabn	68,0,417,.LM46-.LFBB5
 441               	.LM46:
 442 0132 61E0      		ldi r22,lo8(1)
 443 0134 81E0      		ldi r24,lo8(1)
 444 0136 00D0      		rcall LCD_Cursor
 418:rev2.c        **** 	uint8_t i = backlight;
 445               		.stabn	68,0,418,.LM47-.LFBB5
 446               	.LM47:
 447 0138 C091 0000 		lds r28,backlight
 419:rev2.c        **** 	for(i; i>0; i--)
 448               		.stabn	68,0,419,.LM48-.LFBB5
 449               	.LM48:
 450 013c 00C0      		rjmp .L19
 451               	.L20:
 420:rev2.c        **** 	{
 421:rev2.c        **** 		LCD_Write("=");
 452               		.stabn	68,0,421,.LM49-.LFBB5
 453               	.LM49:
 454 013e 80E0      		ldi r24,lo8(.LC11)
 455 0140 90E0      		ldi r25,hi8(.LC11)
 456 0142 00D0      		rcall LCD_Write
 419:rev2.c        **** 	for(i; i>0; i--)
 457               		.stabn	68,0,419,.LM50-.LFBB5
 458               	.LM50:
 459 0144 C150      		subi r28,lo8(-(-1))
 460               	.L19:
 419:rev2.c        **** 	for(i; i>0; i--)
 461               		.stabn	68,0,419,.LM51-.LFBB5
 462               	.LM51:
 463 0146 C111      		cpse r28,__zero_reg__
 464 0148 00C0      		rjmp .L20
 422:rev2.c        **** 	}
 423:rev2.c        **** 	LCD_Write(">");
 465               		.stabn	68,0,423,.LM52-.LFBB5
 466               	.LM52:
 467 014a 80E0      		ldi r24,lo8(.LC12)
 468 014c 90E0      		ldi r25,hi8(.LC12)
 469 014e 00D0      		rcall LCD_Write
 470               	.LBB7:
 424:rev2.c        **** 	while(!SW_Check1() && !SW_Check2() && !SW_Check3() && !SW_Check4())
 425:rev2.c        **** 	{
 426:rev2.c        **** 		unsigned char dir = SW_CheckEncoder();
 427:rev2.c        **** 		if(dir)
 428:rev2.c        **** 		{
GAS LISTING /tmp/ccvMAa46.s 			page 17


 429:rev2.c        **** 			if(dir == ENCODER_CW) 	backlight += 1; 
 430:rev2.c        **** 			else					backlight -= 1;
 431:rev2.c        **** 			if(backlight > 20)
 432:rev2.c        **** 				backlight = 0;
 433:rev2.c        **** 			else if(backlight > 13)
 434:rev2.c        **** 				backlight = 13;
 471               		.stabn	68,0,434,.LM53-.LFBB5
 472               	.LM53:
 473 0150 DDE0      		ldi r29,lo8(13)
 474               	.LBE7:
 424:rev2.c        **** 	while(!SW_Check1() && !SW_Check2() && !SW_Check3() && !SW_Check4())
 475               		.stabn	68,0,424,.LM54-.LFBB5
 476               	.LM54:
 477 0152 00C0      		rjmp .L38
 478               	.L32:
 479               	.LBB8:
 426:rev2.c        **** 		unsigned char dir = SW_CheckEncoder();
 480               		.stabn	68,0,426,.LM55-.LFBB5
 481               	.LM55:
 482 0154 00D0      		rcall SW_CheckEncoder
 427:rev2.c        **** 		if(dir)
 483               		.stabn	68,0,427,.LM56-.LFBB5
 484               	.LM56:
 485 0156 8823      		tst r24
 486 0158 01F0      		breq .L38
 487 015a 9091 0000 		lds r25,backlight
 429:rev2.c        **** 			if(dir == ENCODER_CW) 	backlight += 1; 
 488               		.stabn	68,0,429,.LM57-.LFBB5
 489               	.LM57:
 490 015e 8031      		cpi r24,lo8(16)
 491 0160 01F4      		brne .L23
 429:rev2.c        **** 			if(dir == ENCODER_CW) 	backlight += 1; 
 492               		.stabn	68,0,429,.LM58-.LFBB5
 493               	.LM58:
 494 0162 9F5F      		subi r25,lo8(-(1))
 495 0164 00C0      		rjmp .L39
 496               	.L23:
 430:rev2.c        **** 			else					backlight -= 1;
 497               		.stabn	68,0,430,.LM59-.LFBB5
 498               	.LM59:
 499 0166 9150      		subi r25,lo8(-(-1))
 500               	.L39:
 501 0168 9093 0000 		sts backlight,r25
 431:rev2.c        **** 			if(backlight > 20)
 502               		.stabn	68,0,431,.LM60-.LFBB5
 503               	.LM60:
 504 016c 8091 0000 		lds r24,backlight
 505 0170 8531      		cpi r24,lo8(21)
 506 0172 00F0      		brlo .L25
 432:rev2.c        **** 				backlight = 0;
 507               		.stabn	68,0,432,.LM61-.LFBB5
 508               	.LM61:
 509 0174 1092 0000 		sts backlight,__zero_reg__
 510 0178 00C0      		rjmp .L38
 511               	.L25:
 433:rev2.c        **** 			else if(backlight > 13)
 512               		.stabn	68,0,433,.LM62-.LFBB5
GAS LISTING /tmp/ccvMAa46.s 			page 18


 513               	.LM62:
 514 017a 8E30      		cpi r24,lo8(14)
 515 017c 00F0      		brlo .L27
 516               		.stabn	68,0,434,.LM63-.LFBB5
 517               	.LM63:
 518 017e D093 0000 		sts backlight,r29
 519 0182 00C0      		rjmp .L38
 520               	.L27:
 435:rev2.c        **** 			else
 436:rev2.c        **** 			{
 437:rev2.c        **** 				OCR1B = 19*backlight;
 521               		.stabn	68,0,437,.LM64-.LFBB5
 522               	.LM64:
 523 0184 23E1      		ldi r18,lo8(19)
 524 0186 829F      		mul r24,r18
 525 0188 C001      		movw r24,r0
 526 018a 1124      		clr __zero_reg__
 527 018c 99BD      		out 0x28+1,r25
 528 018e 88BD      		out 0x28,r24
 438:rev2.c        **** 				LCD_Cursor(1,0);
 529               		.stabn	68,0,438,.LM65-.LFBB5
 530               	.LM65:
 531 0190 60E0      		ldi r22,0
 532 0192 81E0      		ldi r24,lo8(1)
 533 0194 00D0      		rcall LCD_Cursor
 439:rev2.c        **** 				LCD_Write("[              ]");
 534               		.stabn	68,0,439,.LM66-.LFBB5
 535               	.LM66:
 536 0196 80E0      		ldi r24,lo8(.LC10)
 537 0198 90E0      		ldi r25,hi8(.LC10)
 538 019a 00D0      		rcall LCD_Write
 440:rev2.c        **** 				LCD_Cursor(1,1);
 539               		.stabn	68,0,440,.LM67-.LFBB5
 540               	.LM67:
 541 019c 61E0      		ldi r22,lo8(1)
 542 019e 81E0      		ldi r24,lo8(1)
 543 01a0 00D0      		rcall LCD_Cursor
 441:rev2.c        **** 				for(i = backlight; i>0; i--)
 544               		.stabn	68,0,441,.LM68-.LFBB5
 545               	.LM68:
 546 01a2 C091 0000 		lds r28,backlight
 547 01a6 00C0      		rjmp .L28
 548               	.L29:
 442:rev2.c        **** 				{
 443:rev2.c        **** 					LCD_Write("=");
 549               		.stabn	68,0,443,.LM69-.LFBB5
 550               	.LM69:
 551 01a8 80E0      		ldi r24,lo8(.LC11)
 552 01aa 90E0      		ldi r25,hi8(.LC11)
 553 01ac 00D0      		rcall LCD_Write
 441:rev2.c        **** 				for(i = backlight; i>0; i--)
 554               		.stabn	68,0,441,.LM70-.LFBB5
 555               	.LM70:
 556 01ae C150      		subi r28,lo8(-(-1))
 557               	.L28:
 441:rev2.c        **** 				for(i = backlight; i>0; i--)
 558               		.stabn	68,0,441,.LM71-.LFBB5
GAS LISTING /tmp/ccvMAa46.s 			page 19


 559               	.LM71:
 560 01b0 C111      		cpse r28,__zero_reg__
 561 01b2 00C0      		rjmp .L29
 444:rev2.c        **** 				}
 445:rev2.c        **** 				LCD_Write(">");
 562               		.stabn	68,0,445,.LM72-.LFBB5
 563               	.LM72:
 564 01b4 80E0      		ldi r24,lo8(.LC12)
 565 01b6 90E0      		ldi r25,hi8(.LC12)
 566 01b8 00D0      		rcall LCD_Write
 567               	.L38:
 568               	.LBE8:
 424:rev2.c        **** 	while(!SW_Check1() && !SW_Check2() && !SW_Check3() && !SW_Check4())
 569               		.stabn	68,0,424,.LM73-.LFBB5
 570               	.LM73:
 571 01ba 00D0      		rcall SW_Check1
 572 01bc 8111      		cpse r24,__zero_reg__
 573 01be 00C0      		rjmp .L18
 424:rev2.c        **** 	while(!SW_Check1() && !SW_Check2() && !SW_Check3() && !SW_Check4())
 574               		.stabn	68,0,424,.LM74-.LFBB5
 575               	.LM74:
 576 01c0 00D0      		rcall SW_Check2
 577 01c2 8111      		cpse r24,__zero_reg__
 578 01c4 00C0      		rjmp .L18
 424:rev2.c        **** 	while(!SW_Check1() && !SW_Check2() && !SW_Check3() && !SW_Check4())
 579               		.stabn	68,0,424,.LM75-.LFBB5
 580               	.LM75:
 581 01c6 00D0      		rcall SW_Check3
 582 01c8 8111      		cpse r24,__zero_reg__
 583 01ca 00C0      		rjmp .L18
 584 01cc 00D0      		rcall SW_Check4
 585 01ce 8823      		tst r24
 586 01d0 01F0      		breq .L32
 587               	.L18:
 588               	/* epilogue start */
 446:rev2.c        **** 			}
 447:rev2.c        **** 		}
 448:rev2.c        **** 	}
 449:rev2.c        **** }
 589               		.stabn	68,0,449,.LM76-.LFBB5
 590               	.LM76:
 591 01d2 DF91      		pop r29
 592 01d4 CF91      		pop r28
 593 01d6 0895      		ret
 594               		.size	MENU_Backlight, .-MENU_Backlight
 595               		.stabs	"dir:r(0,11)",64,0,426,24
 596               		.stabn	192,0,0,.LBB7-.LFBB5
 597               		.stabn	224,0,0,.LBE7-.LFBB5
 598               		.stabs	"dir:r(0,11)",64,0,426,24
 599               		.stabn	192,0,0,.LBB8-.LFBB5
 600               		.stabn	224,0,0,.LBE8-.LFBB5
 601               	.Lscope5:
 602               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 603               		.stabd	78,0,0
 604               		.section	.rodata.str1.1
 605               	.LC13:
 606 0045 6469 6769 		.string	"digital"
GAS LISTING /tmp/ccvMAa46.s 			page 20


 606      7461 6C00 
 607               	.LC14:
 608 004d 5053 5500 		.string	"PSU"
 609               	.global	__floatunsisf
 610               	.global	__divsf3
 611               	.global	__fixunssfsi
 612               	.global	__mulsf3
 613               		.section	.text.startup,"ax",@progbits
 614               		.stabs	"main:F(0,1)",36,0,13,main
 615               	.global	main
 616               		.type	main, @function
 617               	main:
 618               		.stabd	46,0,0
  14:rev2.c        **** {
 619               		.stabn	68,0,14,.LM77-.LFBB6
 620               	.LM77:
 621               	.LFBB6:
 622 0000 CF93      		push r28
 623 0002 DF93      		push r29
 624 0004 CDB7      		in r28,__SP_L__
 625 0006 DEB7      		in r29,__SP_H__
 626 0008 EC97      		sbiw r28,60
 627 000a 0FB6      		in __tmp_reg__,__SREG__
 628 000c F894      		cli
 629 000e DEBF      		out __SP_H__,r29
 630 0010 0FBE      		out __SREG__,__tmp_reg__
 631 0012 CDBF      		out __SP_L__,r28
 632               	/* prologue: function */
 633               	/* frame size = 60 */
 634               	/* stack size = 62 */
 635               	.L__stack_usage = 62
  15:rev2.c        **** 	DDRB = 0;
 636               		.stabn	68,0,15,.LM78-.LFBB6
 637               	.LM78:
 638 0014 17BA      		out 0x17,__zero_reg__
  16:rev2.c        **** 	DDRC = 0;
 639               		.stabn	68,0,16,.LM79-.LFBB6
 640               	.LM79:
 641 0016 14BA      		out 0x14,__zero_reg__
  17:rev2.c        **** 	DDRD = 0;
 642               		.stabn	68,0,17,.LM80-.LFBB6
 643               	.LM80:
 644 0018 11BA      		out 0x11,__zero_reg__
  20:rev2.c        **** 	SW_Initialize();
 645               		.stabn	68,0,20,.LM81-.LFBB6
 646               	.LM81:
 647 001a 00D0      		rcall SW_Initialize
  23:rev2.c        **** 	DDRD |= 1 << PD7;	// DAC chip select
 648               		.stabn	68,0,23,.LM82-.LFBB6
 649               	.LM82:
 650 001c 8F9A      		sbi 0x11,7
  24:rev2.c        **** 	DESELECT_DAC;
 651               		.stabn	68,0,24,.LM83-.LFBB6
 652               	.LM83:
 653 001e 979A      		sbi 0x12,7
  27:rev2.c        **** 	DDRB |= 1 << PB0;	// Output enable
 654               		.stabn	68,0,27,.LM84-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 21


 655               	.LM84:
 656 0020 B89A      		sbi 0x17,0
  28:rev2.c        **** 	DISABLE_OUTPUT;
 657               		.stabn	68,0,28,.LM85-.LFBB6
 658               	.LM85:
 659 0022 C098      		cbi 0x18,0
  31:rev2.c        **** 	DDRB |= 1 << PB3;	// SPI MOSI
 660               		.stabn	68,0,31,.LM86-.LFBB6
 661               	.LM86:
 662 0024 BB9A      		sbi 0x17,3
  32:rev2.c        **** 	DDRB |= 1 << PB5;	// SPI SCK
 663               		.stabn	68,0,32,.LM87-.LFBB6
 664               	.LM87:
 665 0026 BD9A      		sbi 0x17,5
  34:rev2.c        **** 	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 666               		.stabn	68,0,34,.LM88-.LFBB6
 667               	.LM88:
 668 0028 81E5      		ldi r24,lo8(81)
 669 002a 8DB9      		out 0xd,r24
  40:rev2.c        **** 	DDRB |= 1 << PB1;							// Charge pump
 670               		.stabn	68,0,40,.LM89-.LFBB6
 671               	.LM89:
 672 002c B99A      		sbi 0x17,1
  41:rev2.c        **** 	DDRB |= 1 << PB2;							// Backlight
 673               		.stabn	68,0,41,.LM90-.LFBB6
 674               	.LM90:
 675 002e BA9A      		sbi 0x17,2
  42:rev2.c        **** 	TCCR1A  = (1 << COM1A1) | (1 << COM1B1);	// Enable both osc
 676               		.stabn	68,0,42,.LM91-.LFBB6
 677               	.LM91:
 678 0030 80EA      		ldi r24,lo8(-96)
 679 0032 8FBD      		out 0x2f,r24
  43:rev2.c        **** 	TCCR1A |= (1 << WGM10) | (1 << WGM12);		// FAST 8 bit PWM
 680               		.stabn	68,0,43,.LM92-.LFBB6
 681               	.LM92:
 682 0034 8FB5      		in r24,0x2f
 683 0036 8960      		ori r24,lo8(9)
 684 0038 8FBD      		out 0x2f,r24
  44:rev2.c        **** 	OCR1A = 0x80;								// charge pump 128
 685               		.stabn	68,0,44,.LM93-.LFBB6
 686               	.LM93:
 687 003a 80E8      		ldi r24,lo8(-128)
 688 003c 90E0      		ldi r25,0
 689 003e 9BBD      		out 0x2a+1,r25
 690 0040 8ABD      		out 0x2a,r24
  45:rev2.c        **** 	OCR1B = backlight*19;						// Backlight
 691               		.stabn	68,0,45,.LM94-.LFBB6
 692               	.LM94:
 693 0042 8091 0000 		lds r24,backlight
 694 0046 23E1      		ldi r18,lo8(19)
 695 0048 829F      		mul r24,r18
 696 004a C001      		movw r24,r0
 697 004c 1124      		clr __zero_reg__
 698 004e 99BD      		out 0x28+1,r25
 699 0050 88BD      		out 0x28,r24
  46:rev2.c        **** 	TCCR1B = (1 << CS10);						// START no prescaler
 700               		.stabn	68,0,46,.LM95-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 22


 701               	.LM95:
 702 0052 81E0      		ldi r24,lo8(1)
 703 0054 8EBD      		out 0x2e,r24
  49:rev2.c        **** 	LCD_Initialize();
 704               		.stabn	68,0,49,.LM96-.LFBB6
 705               	.LM96:
 706 0056 00D0      		rcall LCD_Initialize
  50:rev2.c        **** 	LCD_Cursor(0,4);
 707               		.stabn	68,0,50,.LM97-.LFBB6
 708               	.LM97:
 709 0058 64E0      		ldi r22,lo8(4)
 710 005a 80E0      		ldi r24,0
 711 005c 00D0      		rcall LCD_Cursor
  51:rev2.c        **** 	LCD_Write("digital");
 712               		.stabn	68,0,51,.LM98-.LFBB6
 713               	.LM98:
 714 005e 80E0      		ldi r24,lo8(.LC13)
 715 0060 90E0      		ldi r25,hi8(.LC13)
 716 0062 00D0      		rcall LCD_Write
  52:rev2.c        **** 	LCD_Cursor(1,6);
 717               		.stabn	68,0,52,.LM99-.LFBB6
 718               	.LM99:
 719 0064 66E0      		ldi r22,lo8(6)
 720 0066 81E0      		ldi r24,lo8(1)
 721 0068 00D0      		rcall LCD_Cursor
  53:rev2.c        **** 	LCD_Write("PSU");
 722               		.stabn	68,0,53,.LM100-.LFBB6
 723               	.LM100:
 724 006a 80E0      		ldi r24,lo8(.LC14)
 725 006c 90E0      		ldi r25,hi8(.LC14)
 726 006e 00D0      		rcall LCD_Write
 727               	.LBB9:
 728               	.LBB10:
 729               		.stabs	"/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h",132,0,0,.Ltext1
 730               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
GAS LISTING /tmp/ccvMAa46.s 			page 23


  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
GAS LISTING /tmp/ccvMAa46.s 			page 24


  80:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
GAS LISTING /tmp/ccvMAa46.s 			page 25


 137:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 731               		.stabn	68,0,164,.LM101-.LFBB6
 732               	.LM101:
 733 0070 3FEF      		ldi r19,lo8(3199999)
 734 0072 83ED      		ldi r24,hi8(3199999)
 735 0074 90E3      		ldi r25,hlo8(3199999)
 736 0076 3150      		1: subi r19,1
 737 0078 8040      		sbci r24,0
 738 007a 9040      		sbci r25,0
 739 007c 01F4      		brne 1b
 740 007e 00C0      		rjmp .
 741 0080 0000      		nop
 742               	.LBE10:
 743               	.LBE9:
 744               		.stabs	"rev2.c",132,0,0,.Ltext2
 745               	.Ltext2:
  55:rev2.c        **** 	LCD_Clear();
 746               		.stabn	68,0,55,.LM102-.LFBB6
 747               	.LM102:
 748 0082 00D0      		rcall LCD_Clear
  67:rev2.c        **** 	mapVoltage(voltageRead,cVoltageRead);
 749               		.stabn	68,0,67,.LM103-.LFBB6
 750               	.LM103:
 751 0084 4E01      		movw r8,r28
 752 0086 2FE1      		ldi r18,31
 753 0088 820E      		add r8,r18
 754 008a 911C      		adc r9,__zero_reg__
 755 008c B401      		movw r22,r8
 756 008e 80E0      		ldi r24,0
 757 0090 90E0      		ldi r25,0
GAS LISTING /tmp/ccvMAa46.s 			page 26


 758 0092 00D0      		rcall mapVoltage
  69:rev2.c        **** 	mapCurrent(currentRead,cCurrentRead);
 759               		.stabn	68,0,69,.LM104-.LFBB6
 760               	.LM104:
 761 0094 3E01      		movw r6,r28
 762 0096 35E1      		ldi r19,21
 763 0098 630E      		add r6,r19
 764 009a 711C      		adc r7,__zero_reg__
 765 009c B301      		movw r22,r6
 766 009e 80E0      		ldi r24,0
 767 00a0 90E0      		ldi r25,0
 768 00a2 00D0      		rcall mapCurrent
  77:rev2.c        **** 	mapVoltage(voltageSet,cVoltageSet);
 769               		.stabn	68,0,77,.LM105-.LFBB6
 770               	.LM105:
 771 00a4 5E01      		movw r10,r28
 772 00a6 8BE0      		ldi r24,11
 773 00a8 A80E      		add r10,r24
 774 00aa B11C      		adc r11,__zero_reg__
 775 00ac B501      		movw r22,r10
 776 00ae 80E0      		ldi r24,0
 777 00b0 90E0      		ldi r25,0
 778 00b2 00D0      		rcall mapVoltage
  79:rev2.c        **** 	mapCurrent(currentSet,cCurrentSet);
 779               		.stabn	68,0,79,.LM106-.LFBB6
 780               	.LM106:
 781 00b4 CC24      		clr r12
 782 00b6 C394      		inc r12
 783 00b8 D12C      		mov r13,__zero_reg__
 784 00ba CC0E      		add r12,r28
 785 00bc DD1E      		adc r13,r29
 786 00be B601      		movw r22,r12
 787 00c0 80E0      		ldi r24,0
 788 00c2 90E0      		ldi r25,0
 789 00c4 00D0      		rcall mapCurrent
  96:rev2.c        **** 	ADC_initialize();
 790               		.stabn	68,0,96,.LM107-.LFBB6
 791               	.LM107:
 792 00c6 00D0      		rcall ADC_initialize
  97:rev2.c        **** 	ADC_STARTCONVERSION;
 793               		.stabn	68,0,97,.LM108-.LFBB6
 794               	.LM108:
 795 00c8 369A      		sbi 0x6,6
  98:rev2.c        **** 	sei();
 796               		.stabn	68,0,98,.LM109-.LFBB6
 797               	.LM109:
 798               	/* #APP */
 799               	 ;  98 "rev2.c" 1
 800 00ca 7894      		sei
 801               	 ;  0 "" 2
 101:rev2.c        **** 	USART_Initialize();
 802               		.stabn	68,0,101,.LM110-.LFBB6
 803               	.LM110:
 804               	/* #NOAPP */
 805 00cc 00D0      		rcall USART_Initialize
 103:rev2.c        **** 	MENU_Home(cVoltageSet,cCurrentSet);
 806               		.stabn	68,0,103,.LM111-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 27


 807               	.LM111:
 808 00ce B601      		movw r22,r12
 809 00d0 C501      		movw r24,r10
 810 00d2 00D0      		rcall MENU_Home
 104:rev2.c        **** 	LCD_HighLight();
 811               		.stabn	68,0,104,.LM112-.LFBB6
 812               	.LM112:
 813 00d4 00D0      		rcall LCD_HighLight
  75:rev2.c        **** 	uint16_t currentSet = 0;
 814               		.stabn	68,0,75,.LM113-.LFBB6
 815               	.LM113:
 816 00d6 E12C      		mov r14,__zero_reg__
 817 00d8 F12C      		mov r15,__zero_reg__
  74:rev2.c        **** 	uint16_t voltageSet = 0;
 818               		.stabn	68,0,74,.LM114-.LFBB6
 819               	.LM114:
 820 00da 00E0      		ldi r16,0
 821 00dc 10E0      		ldi r17,0
  71:rev2.c        **** 	int readCounter = numReadAverages;
 822               		.stabn	68,0,71,.LM115-.LFBB6
 823               	.LM115:
 824 00de 25E0      		ldi r18,lo8(5)
 825 00e0 30E0      		ldi r19,0
 826 00e2 3EA7      		std Y+46,r19
 827 00e4 2DA7      		std Y+45,r18
  65:rev2.c        **** 	uint16_t vinAveraging = 0;
 828               		.stabn	68,0,65,.LM116-.LFBB6
 829               	.LM116:
 830 00e6 1CA6      		std Y+44,__zero_reg__
 831 00e8 1BA6      		std Y+43,__zero_reg__
  64:rev2.c        **** 	uint16_t vinRead = 0;
 832               		.stabn	68,0,64,.LM117-.LFBB6
 833               	.LM117:
 834 00ea 1CAE      		std Y+60,__zero_reg__
 835 00ec 1BAE      		std Y+59,__zero_reg__
  63:rev2.c        **** 	uint16_t preregAveraging = 0;
 836               		.stabn	68,0,63,.LM118-.LFBB6
 837               	.LM118:
 838 00ee 1AA6      		std Y+42,__zero_reg__
 839 00f0 19A6      		std Y+41,__zero_reg__
  62:rev2.c        **** 	uint16_t preregRead = 0;
 840               		.stabn	68,0,62,.LM119-.LFBB6
 841               	.LM119:
 842 00f2 1AAE      		std Y+58,__zero_reg__
 843 00f4 19AE      		std Y+57,__zero_reg__
  61:rev2.c        **** 	uint16_t currentAveraging = 0;
 844               		.stabn	68,0,61,.LM120-.LFBB6
 845               	.LM120:
 846 00f6 212C      		mov r2,__zero_reg__
 847 00f8 312C      		mov r3,__zero_reg__
  60:rev2.c        **** 	uint16_t currentRead = 0;
 848               		.stabn	68,0,60,.LM121-.LFBB6
 849               	.LM121:
 850 00fa 1AAA      		std Y+50,__zero_reg__
 851 00fc 19AA      		std Y+49,__zero_reg__
  59:rev2.c        **** 	uint16_t voltageAveraging = 0;
 852               		.stabn	68,0,59,.LM122-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 28


 853               	.LM122:
 854 00fe 412C      		mov r4,__zero_reg__
 855 0100 512C      		mov r5,__zero_reg__
  58:rev2.c        **** 	uint16_t voltageRead = 0;
 856               		.stabn	68,0,58,.LM123-.LFBB6
 857               	.LM123:
 858 0102 18AA      		std Y+48,__zero_reg__
 859 0104 1FA6      		std Y+47,__zero_reg__
 860               	.LBB11:
 174:rev2.c        **** 				mapVoltage(voltageSet,cVoltageSet);
 861               		.stabn	68,0,174,.LM124-.LFBB6
 862               	.LM124:
 863 0106 ABAA      		std Y+51,r10
 864 0108 BCAA      		std Y+52,r11
 175:rev2.c        **** 				MENU_Home(cVoltageSet,cCurrentSet);
 865               		.stabn	68,0,175,.LM125-.LFBB6
 866               	.LM125:
 867 010a CDAA      		std Y+53,r12
 868 010c DEAA      		std Y+54,r13
 869               	.LBB12:
 249:rev2.c        **** 				voltageRead = voltageAveraging/numReadAverages*voltageReadMulti;
 870               		.stabn	68,0,249,.LM126-.LFBB6
 871               	.LM126:
 872 010e 45E0      		ldi r20,lo8(5)
 873 0110 A42E      		mov r10,r20
 874 0112 B12C      		mov r11,__zero_reg__
 875               	.L106:
 876               	.LBE12:
 115:rev2.c        **** 		if (SW_Check1())
 877               		.stabn	68,0,115,.LM127-.LFBB6
 878               	.LM127:
 879 0114 00D0      		rcall SW_Check1
 880 0116 8823      		tst r24
 881 0118 01F0      		breq .L43
 117:rev2.c        **** 			if(OUTPUT_IS_ENABLED)
 882               		.stabn	68,0,117,.LM128-.LFBB6
 883               	.LM128:
 884 011a C09B      		sbis 0x18,0
 885 011c 00C0      		rjmp .L44
 119:rev2.c        **** 				DISABLE_OUTPUT;
 886               		.stabn	68,0,119,.LM129-.LFBB6
 887               	.LM129:
 888 011e C098      		cbi 0x18,0
 889 0120 00C0      		rjmp .L110
 890               	.L44:
 124:rev2.c        **** 				ENABLE_OUTPUT;
 891               		.stabn	68,0,124,.LM130-.LFBB6
 892               	.LM130:
 893 0122 C09A      		sbi 0x18,0
 894               	.L110:
 125:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 895               		.stabn	68,0,125,.LM131-.LFBB6
 896               	.LM131:
 897 0124 B301      		movw r22,r6
 898 0126 C401      		movw r24,r8
 899 0128 00D0      		rcall MENU_Home
 900               	.L43:
GAS LISTING /tmp/ccvMAa46.s 			page 29


 130:rev2.c        **** 		if (SW_Check2())
 901               		.stabn	68,0,130,.LM132-.LFBB6
 902               	.LM132:
 903 012a 00D0      		rcall SW_Check2
 904 012c 8823      		tst r24
 905 012e 01F0      		breq .L45
 133:rev2.c        **** 			MENU_Backlight();
 906               		.stabn	68,0,133,.LM133-.LFBB6
 907               	.LM133:
 908 0130 00D0      		rcall MENU_Backlight
 134:rev2.c        **** 			MENU_Home(cVoltageRead,cCurrentRead);
 909               		.stabn	68,0,134,.LM134-.LFBB6
 910               	.LM134:
 911 0132 B301      		movw r22,r6
 912 0134 C401      		movw r24,r8
 913 0136 00D0      		rcall MENU_Home
 914               	.L45:
 138:rev2.c        **** 		if (SW_Check4())
 915               		.stabn	68,0,138,.LM135-.LFBB6
 916               	.LM135:
 917 0138 00D0      		rcall SW_Check4
 918 013a 8823      		tst r24
 919 013c 01F0      		breq .L46
 140:rev2.c        **** 			switch(encoderControls)
 920               		.stabn	68,0,140,.LM136-.LFBB6
 921               	.LM136:
 922 013e 8091 0000 		lds r24,encoderControls
 923 0142 8130      		cpi r24,lo8(1)
 924 0144 01F0      		breq .L48
 925 0146 8230      		cpi r24,lo8(2)
 926 0148 01F4      		brne .L107
 927 014a 00C0      		rjmp .L49
 928               	.L48:
 143:rev2.c        **** 				encoderControls = CURRENT;
 929               		.stabn	68,0,143,.LM137-.LFBB6
 930               	.LM137:
 931 014c 32E0      		ldi r19,lo8(2)
 932 014e 3093 0000 		sts encoderControls,r19
 933 0152 00C0      		rjmp .L111
 934               	.L49:
 147:rev2.c        **** 				encoderControls = VOLTAGE;
 935               		.stabn	68,0,147,.LM138-.LFBB6
 936               	.LM138:
 937 0154 81E0      		ldi r24,lo8(1)
 938 0156 8093 0000 		sts encoderControls,r24
 939 015a 00C0      		rjmp .L111
 940               	.L107:
 151:rev2.c        **** 				encoderControls = VOLTAGE;
 941               		.stabn	68,0,151,.LM139-.LFBB6
 942               	.LM139:
 943 015c 91E0      		ldi r25,lo8(1)
 944 015e 9093 0000 		sts encoderControls,r25
 945               	.L111:
 152:rev2.c        **** 				MENU_Home(cVoltageRead,cCurrentRead);
 946               		.stabn	68,0,152,.LM140-.LFBB6
 947               	.LM140:
 948 0162 B301      		movw r22,r6
GAS LISTING /tmp/ccvMAa46.s 			page 30


 949 0164 C401      		movw r24,r8
 950 0166 00D0      		rcall MENU_Home
 951               	.L46:
 159:rev2.c        **** 		unsigned char dir = SW_CheckEncoder();
 952               		.stabn	68,0,159,.LM141-.LFBB6
 953               	.LM141:
 954 0168 00D0      		rcall SW_CheckEncoder
 160:rev2.c        **** 		if(dir)
 955               		.stabn	68,0,160,.LM142-.LFBB6
 956               	.LM142:
 957 016a 8823      		tst r24
 958 016c 01F4      		brne .+2
 959 016e 00C0      		rjmp .L50
 162:rev2.c        **** 			switch(encoderControls)
 960               		.stabn	68,0,162,.LM143-.LFBB6
 961               	.LM143:
 962 0170 9091 0000 		lds r25,encoderControls
 963 0174 9130      		cpi r25,lo8(1)
 964 0176 01F0      		breq .L51
 965 0178 9230      		cpi r25,lo8(2)
 966 017a 01F0      		breq .+2
 967 017c 00C0      		rjmp .L50
 968 017e 00C0      		rjmp .L52
 969               	.L51:
 165:rev2.c        **** 				if(dir == ENCODER_CW)	voltageSet += 2;
 970               		.stabn	68,0,165,.LM144-.LFBB6
 971               	.LM144:
 972 0180 8031      		cpi r24,lo8(16)
 973 0182 01F4      		brne .L53
 165:rev2.c        **** 				if(dir == ENCODER_CW)	voltageSet += 2;
 974               		.stabn	68,0,165,.LM145-.LFBB6
 975               	.LM145:
 976 0184 0E5F      		subi r16,-2
 977 0186 1F4F      		sbci r17,-1
 978 0188 00C0      		rjmp .L54
 979               	.L53:
 166:rev2.c        **** 				else 					voltageSet -= 2;
 980               		.stabn	68,0,166,.LM146-.LFBB6
 981               	.LM146:
 982 018a 0250      		subi r16,2
 983 018c 1109      		sbc r17,__zero_reg__
 984               	.L54:
 168:rev2.c        **** 				if(voltageSet > 60000)
 985               		.stabn	68,0,168,.LM147-.LFBB6
 986               	.LM147:
 987 018e 0136      		cpi r16,97
 988 0190 2AEE      		ldi r18,-22
 989 0192 1207      		cpc r17,r18
 990 0194 00F4      		brsh .L85
 991 0196 013D      		cpi r16,-47
 992 0198 37E0      		ldi r19,7
 993 019a 1307      		cpc r17,r19
 994 019c 00F0      		brlo .L55
 995 019e 00ED      		ldi r16,lo8(-48)
 996 01a0 17E0      		ldi r17,lo8(7)
 997 01a2 00C0      		rjmp .L55
 998               	.L85:
GAS LISTING /tmp/ccvMAa46.s 			page 31


 169:rev2.c        **** 					voltageSet = 0;
 999               		.stabn	68,0,169,.LM148-.LFBB6
 1000               	.LM148:
 1001 01a4 00E0      		ldi r16,0
 1002 01a6 10E0      		ldi r17,0
 1003               	.L55:
 173:rev2.c        **** 				transferToDAC(9,voltageSet/voltageSetMulti);
 1004               		.stabn	68,0,173,.LM149-.LFBB6
 1005               	.LM149:
 1006 01a8 B801      		movw r22,r16
 1007 01aa 80E0      		ldi r24,0
 1008 01ac 90E0      		ldi r25,0
 1009 01ae 00D0      		rcall __floatunsisf
 1010 01b0 22EC      		ldi r18,lo8(-62)
 1011 01b2 35E8      		ldi r19,lo8(-123)
 1012 01b4 42E1      		ldi r20,lo8(18)
 1013 01b6 50E4      		ldi r21,lo8(64)
 1014 01b8 00D0      		rcall __divsf3
 1015 01ba 00D0      		rcall __fixunssfsi
 1016 01bc 89E0      		ldi r24,lo8(9)
 1017 01be 00D0      		rcall transferToDAC
 174:rev2.c        **** 				mapVoltage(voltageSet,cVoltageSet);
 1018               		.stabn	68,0,174,.LM150-.LFBB6
 1019               	.LM150:
 1020 01c0 6BA9      		ldd r22,Y+51
 1021 01c2 7CA9      		ldd r23,Y+52
 1022 01c4 C801      		movw r24,r16
 1023 01c6 00D0      		rcall mapVoltage
 1024 01c8 00C0      		rjmp .L112
 1025               	.L52:
 181:rev2.c        **** 				if(dir == ENCODER_CW) 	currentSet += 1;
 1026               		.stabn	68,0,181,.LM151-.LFBB6
 1027               	.LM151:
 1028 01ca 8031      		cpi r24,lo8(16)
 1029 01cc 01F4      		brne .L57
 181:rev2.c        **** 				if(dir == ENCODER_CW) 	currentSet += 1;
 1030               		.stabn	68,0,181,.LM152-.LFBB6
 1031               	.LM152:
 1032 01ce 8FEF      		ldi r24,-1
 1033 01d0 E81A      		sub r14,r24
 1034 01d2 F80A      		sbc r15,r24
 1035 01d4 00C0      		rjmp .L58
 1036               	.L57:
 182:rev2.c        **** 				else					currentSet -= 1;
 1037               		.stabn	68,0,182,.LM153-.LFBB6
 1038               	.LM153:
 1039 01d6 91E0      		ldi r25,1
 1040 01d8 E91A      		sub r14,r25
 1041 01da F108      		sbc r15,__zero_reg__
 1042               	.L58:
 184:rev2.c        **** 				if(currentSet > 60000)
 1043               		.stabn	68,0,184,.LM154-.LFBB6
 1044               	.LM154:
 1045 01dc 21E6      		ldi r18,97
 1046 01de E216      		cp r14,r18
 1047 01e0 2AEE      		ldi r18,-22
 1048 01e2 F206      		cpc r15,r18
GAS LISTING /tmp/ccvMAa46.s 			page 32


 1049 01e4 00F4      		brsh .L86
 1050 01e6 35E6      		ldi r19,101
 1051 01e8 E316      		cp r14,r19
 1052 01ea F104      		cpc r15,__zero_reg__
 1053 01ec 00F0      		brlo .L59
 1054 01ee 24E6      		ldi r18,lo8(100)
 1055 01f0 E22E      		mov r14,r18
 1056 01f2 F12C      		mov r15,__zero_reg__
 1057 01f4 00C0      		rjmp .L59
 1058               	.L86:
 185:rev2.c        **** 					currentSet = 0;
 1059               		.stabn	68,0,185,.LM155-.LFBB6
 1060               	.LM155:
 1061 01f6 E12C      		mov r14,__zero_reg__
 1062 01f8 F12C      		mov r15,__zero_reg__
 1063               	.L59:
 189:rev2.c        **** 				transferToDAC(10,currentSet/currentSetMulti);
 1064               		.stabn	68,0,189,.LM156-.LFBB6
 1065               	.LM156:
 1066 01fa B701      		movw r22,r14
 1067 01fc 80E0      		ldi r24,0
 1068 01fe 90E0      		ldi r25,0
 1069 0200 00D0      		rcall __floatunsisf
 1070 0202 24E1      		ldi r18,lo8(20)
 1071 0204 39E6      		ldi r19,lo8(105)
 1072 0206 49E0      		ldi r20,lo8(9)
 1073 0208 5EE3      		ldi r21,lo8(62)
 1074 020a 00D0      		rcall __divsf3
 1075 020c 00D0      		rcall __fixunssfsi
 1076 020e 8AE0      		ldi r24,lo8(10)
 1077 0210 00D0      		rcall transferToDAC
 190:rev2.c        **** 				mapCurrent(currentSet,cCurrentSet);
 1078               		.stabn	68,0,190,.LM157-.LFBB6
 1079               	.LM157:
 1080 0212 6DA9      		ldd r22,Y+53
 1081 0214 7EA9      		ldd r23,Y+54
 1082 0216 C701      		movw r24,r14
 1083 0218 00D0      		rcall mapCurrent
 1084               	.L112:
 191:rev2.c        **** 				MENU_Home(cVoltageSet,cCurrentSet);
 1085               		.stabn	68,0,191,.LM158-.LFBB6
 1086               	.LM158:
 1087 021a 6DA9      		ldd r22,Y+53
 1088 021c 7EA9      		ldd r23,Y+54
 1089 021e 8BA9      		ldd r24,Y+51
 1090 0220 9CA9      		ldd r25,Y+52
 1091 0222 00D0      		rcall MENU_Home
 1092               	.L50:
 204:rev2.c        **** 		if(ADC_status & ADC_NEWREADING)
 1093               		.stabn	68,0,204,.LM159-.LFBB6
 1094               	.LM159:
 1095 0224 8091 0000 		lds r24,ADC_status
 1096 0228 86FF      		sbrs r24,6
 1097 022a 00C0      		rjmp .L61
 206:rev2.c        **** 			ADC_status &= ~ADC_NEWREADING;
 1098               		.stabn	68,0,206,.LM160-.LFBB6
 1099               	.LM160:
GAS LISTING /tmp/ccvMAa46.s 			page 33


 1100 022c 8F7B      		andi r24,lo8(-65)
 208:rev2.c        **** 			switch(ADC_status)
 1101               		.stabn	68,0,208,.LM161-.LFBB6
 1102               	.LM161:
 1103 022e 8230      		cpi r24,lo8(2)
 1104 0230 01F0      		breq .L64
 1105 0232 00F4      		brsh .L67
 1106 0234 8130      		cpi r24,lo8(1)
 1107 0236 01F0      		breq .+2
 1108 0238 00C0      		rjmp .L62
 1109 023a 00C0      		rjmp .L63
 1110               	.L67:
 1111 023c 8430      		cpi r24,lo8(4)
 1112 023e 01F0      		breq .L65
 1113 0240 8830      		cpi r24,lo8(8)
 1114 0242 01F0      		breq .+2
 1115 0244 00C0      		rjmp .L62
 1116 0246 00C0      		rjmp .L66
 1117               	.L63:
 211:rev2.c        **** 				voltageAveraging += ADC_reading;
 1118               		.stabn	68,0,211,.LM162-.LFBB6
 1119               	.LM162:
 1120 0248 8091 0000 		lds r24,ADC_reading
 1121 024c 9091 0000 		lds r25,ADC_reading+1
 1122 0250 480E      		add r4,r24
 1123 0252 591E      		adc r5,r25
 212:rev2.c        **** 				ADC_status = ADC_CURRENT;
 1124               		.stabn	68,0,212,.LM163-.LFBB6
 1125               	.LM163:
 1126 0254 82E0      		ldi r24,lo8(2)
 1127 0256 8093 0000 		sts ADC_status,r24
 213:rev2.c        **** 				ADMUX &= 0xF0;
 1128               		.stabn	68,0,213,.LM164-.LFBB6
 1129               	.LM164:
 1130 025a 87B1      		in r24,0x7
 1131 025c 807F      		andi r24,lo8(-16)
 1132 025e 87B9      		out 0x7,r24
 214:rev2.c        **** 				ADMUX |= CURRENT_MON;
 1133               		.stabn	68,0,214,.LM165-.LFBB6
 1134               	.LM165:
 1135 0260 389A      		sbi 0x7,0
 215:rev2.c        **** 				break;
 1136               		.stabn	68,0,215,.LM166-.LFBB6
 1137               	.LM166:
 1138 0262 00C0      		rjmp .L68
 1139               	.L64:
 217:rev2.c        **** 				currentAveraging += ADC_reading;
 1140               		.stabn	68,0,217,.LM167-.LFBB6
 1141               	.LM167:
 1142 0264 8091 0000 		lds r24,ADC_reading
 1143 0268 9091 0000 		lds r25,ADC_reading+1
 1144 026c 280E      		add r2,r24
 1145 026e 391E      		adc r3,r25
 218:rev2.c        **** 				ADC_status = ADC_PREREGULATOR;
 1146               		.stabn	68,0,218,.LM168-.LFBB6
 1147               	.LM168:
 1148 0270 94E0      		ldi r25,lo8(4)
GAS LISTING /tmp/ccvMAa46.s 			page 34


 1149 0272 9093 0000 		sts ADC_status,r25
 219:rev2.c        **** 				ADMUX &= 0xF0;
 1150               		.stabn	68,0,219,.LM169-.LFBB6
 1151               	.LM169:
 1152 0276 87B1      		in r24,0x7
 1153 0278 807F      		andi r24,lo8(-16)
 1154 027a 87B9      		out 0x7,r24
 220:rev2.c        **** 				ADMUX |= PREREG;
 1155               		.stabn	68,0,220,.LM170-.LFBB6
 1156               	.LM170:
 1157 027c 399A      		sbi 0x7,1
 221:rev2.c        **** 				break;
 1158               		.stabn	68,0,221,.LM171-.LFBB6
 1159               	.LM171:
 1160 027e 00C0      		rjmp .L68
 1161               	.L65:
 223:rev2.c        **** 				preregAveraging += ADC_reading;
 1162               		.stabn	68,0,223,.LM172-.LFBB6
 1163               	.LM172:
 1164 0280 8091 0000 		lds r24,ADC_reading
 1165 0284 9091 0000 		lds r25,ADC_reading+1
 1166 0288 29A5      		ldd r18,Y+41
 1167 028a 3AA5      		ldd r19,Y+42
 1168 028c 280F      		add r18,r24
 1169 028e 391F      		adc r19,r25
 1170 0290 3AA7      		std Y+42,r19
 1171 0292 29A7      		std Y+41,r18
 224:rev2.c        **** 				ADC_status = ADC_VIN;
 1172               		.stabn	68,0,224,.LM173-.LFBB6
 1173               	.LM173:
 1174 0294 38E0      		ldi r19,lo8(8)
 1175 0296 3093 0000 		sts ADC_status,r19
 225:rev2.c        **** 				ADMUX &= 0xF0;
 1176               		.stabn	68,0,225,.LM174-.LFBB6
 1177               	.LM174:
 1178 029a 87B1      		in r24,0x7
 1179 029c 807F      		andi r24,lo8(-16)
 1180 029e 87B9      		out 0x7,r24
 226:rev2.c        **** 				ADMUX |= VIN_MON;
 1181               		.stabn	68,0,226,.LM175-.LFBB6
 1182               	.LM175:
 1183 02a0 87B1      		in r24,0x7
 1184 02a2 8660      		ori r24,lo8(6)
 1185 02a4 00C0      		rjmp .L113
 1186               	.L66:
 229:rev2.c        **** 				vinAveraging += ADC_reading;
 1187               		.stabn	68,0,229,.LM176-.LFBB6
 1188               	.LM176:
 1189 02a6 8091 0000 		lds r24,ADC_reading
 1190 02aa 9091 0000 		lds r25,ADC_reading+1
 1191 02ae 2BA5      		ldd r18,Y+43
 1192 02b0 3CA5      		ldd r19,Y+44
 1193 02b2 280F      		add r18,r24
 1194 02b4 391F      		adc r19,r25
 1195 02b6 3CA7      		std Y+44,r19
 1196 02b8 2BA7      		std Y+43,r18
 230:rev2.c        **** 				ADC_status = ADC_VOLTAGE;
GAS LISTING /tmp/ccvMAa46.s 			page 35


 1197               		.stabn	68,0,230,.LM177-.LFBB6
 1198               	.LM177:
 1199 02ba 31E0      		ldi r19,lo8(1)
 1200 02bc 3093 0000 		sts ADC_status,r19
 231:rev2.c        **** 				ADMUX &= 0xF0;
 1201               		.stabn	68,0,231,.LM178-.LFBB6
 1202               	.LM178:
 1203 02c0 87B1      		in r24,0x7
 1204 02c2 807F      		andi r24,lo8(-16)
 1205 02c4 87B9      		out 0x7,r24
 232:rev2.c        **** 				ADMUX |= VOLTAGE_MON;
 1206               		.stabn	68,0,232,.LM179-.LFBB6
 1207               	.LM179:
 1208 02c6 87B1      		in r24,0x7
 1209 02c8 87B9      		out 0x7,r24
 234:rev2.c        **** 				readCounter--;
 1210               		.stabn	68,0,234,.LM180-.LFBB6
 1211               	.LM180:
 1212 02ca 8DA5      		ldd r24,Y+45
 1213 02cc 9EA5      		ldd r25,Y+46
 1214 02ce 0197      		sbiw r24,1
 1215 02d0 9EA7      		std Y+46,r25
 1216 02d2 8DA7      		std Y+45,r24
 235:rev2.c        **** 				break;
 1217               		.stabn	68,0,235,.LM181-.LFBB6
 1218               	.LM181:
 1219 02d4 00C0      		rjmp .L68
 1220               	.L62:
 237:rev2.c        **** 				ADC_status = ADC_VOLTAGE;
 1221               		.stabn	68,0,237,.LM182-.LFBB6
 1222               	.LM182:
 1223 02d6 91E0      		ldi r25,lo8(1)
 1224 02d8 9093 0000 		sts ADC_status,r25
 238:rev2.c        **** 				ADMUX &= 0xF0;
 1225               		.stabn	68,0,238,.LM183-.LFBB6
 1226               	.LM183:
 1227 02dc 87B1      		in r24,0x7
 1228 02de 807F      		andi r24,lo8(-16)
 1229 02e0 87B9      		out 0x7,r24
 239:rev2.c        **** 				ADMUX |= VOLTAGE_MON;
 1230               		.stabn	68,0,239,.LM184-.LFBB6
 1231               	.LM184:
 1232 02e2 87B1      		in r24,0x7
 1233               	.L113:
 1234 02e4 87B9      		out 0x7,r24
 1235               	.L68:
 244:rev2.c        **** 			if (readCounter == 0)
 1236               		.stabn	68,0,244,.LM185-.LFBB6
 1237               	.LM185:
 1238 02e6 2DA5      		ldd r18,Y+45
 1239 02e8 3EA5      		ldd r19,Y+46
 1240 02ea 232B      		or r18,r19
 1241 02ec 01F0      		breq .+2
 1242 02ee 00C0      		rjmp .L87
 1243               	.LBB13:
 249:rev2.c        **** 				voltageRead = voltageAveraging/numReadAverages*voltageReadMulti;
 1244               		.stabn	68,0,249,.LM186-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 36


 1245               	.LM186:
 1246 02f0 C201      		movw r24,r4
 1247 02f2 B501      		movw r22,r10
 1248 02f4 00D0      		rcall __udivmodhi4
 1249 02f6 80E0      		ldi r24,0
 1250 02f8 90E0      		ldi r25,0
 1251 02fa 00D0      		rcall __floatunsisf
 1252 02fc 2FE8      		ldi r18,lo8(-113)
 1253 02fe 32EB      		ldi r19,lo8(-78)
 1254 0300 41E3      		ldi r20,lo8(49)
 1255 0302 50E4      		ldi r21,lo8(64)
 1256 0304 00D0      		rcall __mulsf3
 1257 0306 00D0      		rcall __fixunssfsi
 1258 0308 DC01      		movw r26,r24
 1259 030a CB01      		movw r24,r22
 1260 030c 6C01      		movw r12,r24
 250:rev2.c        **** 				mapVoltage(voltageRead,cVoltageRead);
 1261               		.stabn	68,0,250,.LM187-.LFBB6
 1262               	.LM187:
 1263 030e B401      		movw r22,r8
 1264 0310 00D0      		rcall mapVoltage
 253:rev2.c        **** 				currentRead = currentAveraging/numReadAverages*currentReadMulti;
 1265               		.stabn	68,0,253,.LM188-.LFBB6
 1266               	.LM188:
 1267 0312 C101      		movw r24,r2
 1268 0314 B501      		movw r22,r10
 1269 0316 00D0      		rcall __udivmodhi4
 1270 0318 80E0      		ldi r24,0
 1271 031a 90E0      		ldi r25,0
 1272 031c 00D0      		rcall __floatunsisf
 1273 031e 24E1      		ldi r18,lo8(20)
 1274 0320 39E6      		ldi r19,lo8(105)
 1275 0322 49E0      		ldi r20,lo8(9)
 1276 0324 5EE3      		ldi r21,lo8(62)
 1277 0326 00D0      		rcall __mulsf3
 1278 0328 00D0      		rcall __fixunssfsi
 1279 032a DC01      		movw r26,r24
 1280 032c CB01      		movw r24,r22
 1281 032e 98AF      		std Y+56,r25
 1282 0330 8FAB      		std Y+55,r24
 254:rev2.c        **** 				mapCurrent(currentRead,cCurrentRead);
 1283               		.stabn	68,0,254,.LM189-.LFBB6
 1284               	.LM189:
 1285 0332 B301      		movw r22,r6
 1286 0334 00D0      		rcall mapCurrent
 256:rev2.c        **** 				preregRead = preregAveraging/numReadAverages*voltageReadMulti;
 1287               		.stabn	68,0,256,.LM190-.LFBB6
 1288               	.LM190:
 1289 0336 89A5      		ldd r24,Y+41
 1290 0338 9AA5      		ldd r25,Y+42
 1291 033a B501      		movw r22,r10
 1292 033c 00D0      		rcall __udivmodhi4
 1293 033e 80E0      		ldi r24,0
 1294 0340 90E0      		ldi r25,0
 1295 0342 00D0      		rcall __floatunsisf
 1296 0344 2FE8      		ldi r18,lo8(-113)
 1297 0346 32EB      		ldi r19,lo8(-78)
GAS LISTING /tmp/ccvMAa46.s 			page 37


 1298 0348 41E3      		ldi r20,lo8(49)
 1299 034a 50E4      		ldi r21,lo8(64)
 1300 034c 00D0      		rcall __mulsf3
 1301 034e 00D0      		rcall __fixunssfsi
 1302 0350 7AAF      		std Y+58,r23
 1303 0352 69AF      		std Y+57,r22
 258:rev2.c        **** 				vinRead = vinAveraging/numReadAverages*voltageReadMulti;
 1304               		.stabn	68,0,258,.LM191-.LFBB6
 1305               	.LM191:
 1306 0354 8BA5      		ldd r24,Y+43
 1307 0356 9CA5      		ldd r25,Y+44
 1308 0358 B501      		movw r22,r10
 1309 035a 00D0      		rcall __udivmodhi4
 1310 035c 80E0      		ldi r24,0
 1311 035e 90E0      		ldi r25,0
 1312 0360 00D0      		rcall __floatunsisf
 1313 0362 2FE8      		ldi r18,lo8(-113)
 1314 0364 32EB      		ldi r19,lo8(-78)
 1315 0366 41E3      		ldi r20,lo8(49)
 1316 0368 50E4      		ldi r21,lo8(64)
 1317 036a 00D0      		rcall __mulsf3
 1318 036c 00D0      		rcall __fixunssfsi
 1319 036e 7CAF      		std Y+60,r23
 1320 0370 6BAF      		std Y+59,r22
 260:rev2.c        **** 				if(voltageRead != oldVoltageRead || currentRead != oldCurrentRead)
 1321               		.stabn	68,0,260,.LM192-.LFBB6
 1322               	.LM192:
 1323 0372 8FA5      		ldd r24,Y+47
 1324 0374 98A9      		ldd r25,Y+48
 1325 0376 C816      		cp r12,r24
 1326 0378 D906      		cpc r13,r25
 1327 037a 01F4      		brne .L70
 260:rev2.c        **** 				if(voltageRead != oldVoltageRead || currentRead != oldCurrentRead)
 1328               		.stabn	68,0,260,.LM193-.LFBB6
 1329               	.LM193:
 1330 037c 2FA9      		ldd r18,Y+55
 1331 037e 38AD      		ldd r19,Y+56
 1332 0380 89A9      		ldd r24,Y+49
 1333 0382 9AA9      		ldd r25,Y+50
 1334 0384 2817      		cp r18,r24
 1335 0386 3907      		cpc r19,r25
 1336 0388 01F0      		breq .L88
 1337               	.L70:
 262:rev2.c        **** 					MENU_Home(cVoltageRead,cCurrentRead);
 1338               		.stabn	68,0,262,.LM194-.LFBB6
 1339               	.LM194:
 1340 038a B301      		movw r22,r6
 1341 038c C401      		movw r24,r8
 1342 038e 00D0      		rcall MENU_Home
 1343 0390 00C0      		rjmp .L88
 1344               	.L87:
 1345               	.LBE13:
 244:rev2.c        **** 			if (readCounter == 0)
 1346               		.stabn	68,0,244,.LM195-.LFBB6
 1347               	.LM195:
 1348 0392 89A9      		ldd r24,Y+49
 1349 0394 9AA9      		ldd r25,Y+50
GAS LISTING /tmp/ccvMAa46.s 			page 38


 1350 0396 98AF      		std Y+56,r25
 1351 0398 8FAB      		std Y+55,r24
 1352 039a CFA4      		ldd r12,Y+47
 1353 039c D8A8      		ldd r13,Y+48
 1354 039e 00C0      		rjmp .L69
 1355               	.L88:
 1356               	.LBB14:
 246:rev2.c        **** 				readCounter = numReadAverages;
 1357               		.stabn	68,0,246,.LM196-.LFBB6
 1358               	.LM196:
 1359 03a0 25E0      		ldi r18,lo8(5)
 1360 03a2 30E0      		ldi r19,0
 1361 03a4 3EA7      		std Y+46,r19
 1362 03a6 2DA7      		std Y+45,r18
 259:rev2.c        **** 				vinAveraging = 0;
 1363               		.stabn	68,0,259,.LM197-.LFBB6
 1364               	.LM197:
 1365 03a8 1CA6      		std Y+44,__zero_reg__
 1366 03aa 1BA6      		std Y+43,__zero_reg__
 257:rev2.c        **** 				preregAveraging = 0;
 1367               		.stabn	68,0,257,.LM198-.LFBB6
 1368               	.LM198:
 1369 03ac 1AA6      		std Y+42,__zero_reg__
 1370 03ae 19A6      		std Y+41,__zero_reg__
 255:rev2.c        **** 				currentAveraging = 0;
 1371               		.stabn	68,0,255,.LM199-.LFBB6
 1372               	.LM199:
 1373 03b0 212C      		mov r2,__zero_reg__
 1374 03b2 312C      		mov r3,__zero_reg__
 251:rev2.c        **** 				voltageAveraging = 0;
 1375               		.stabn	68,0,251,.LM200-.LFBB6
 1376               	.LM200:
 1377 03b4 412C      		mov r4,__zero_reg__
 1378 03b6 512C      		mov r5,__zero_reg__
 1379               	.L69:
 1380               	.LBE14:
 265:rev2.c        **** 			ADC_STARTCONVERSION;
 1381               		.stabn	68,0,265,.LM201-.LFBB6
 1382               	.LM201:
 1383 03b8 369A      		sbi 0x6,6
 1384 03ba 8FA9      		ldd r24,Y+55
 1385 03bc 98AD      		ldd r25,Y+56
 1386 03be 9AAB      		std Y+50,r25
 1387 03c0 89AB      		std Y+49,r24
 1388 03c2 D8AA      		std Y+48,r13
 1389 03c4 CFA6      		std Y+47,r12
 1390               	.L61:
 270:rev2.c        **** 		unsigned char command = USART_RecieveCommand();
 1391               		.stabn	68,0,270,.LM202-.LFBB6
 1392               	.LM202:
 1393 03c6 00D0      		rcall USART_RecieveCommand
 273:rev2.c        **** 		switch(command)
 1394               		.stabn	68,0,273,.LM203-.LFBB6
 1395               	.LM203:
 1396 03c8 9927      		clr r25
 1397 03ca 803D      		cpi r24,-48
 1398 03cc 9105      		cpc r25,__zero_reg__
GAS LISTING /tmp/ccvMAa46.s 			page 39


 1399 03ce 01F4      		brne .+2
 1400 03d0 00C0      		rjmp .L76
 1401 03d2 04F4      		brge .L82
 1402 03d4 813C      		cpi r24,-63
 1403 03d6 9105      		cpc r25,__zero_reg__
 1404 03d8 01F4      		brne .+2
 1405 03da 00C0      		rjmp .L73
 1406 03dc 04F4      		brge .L83
 1407 03de 803A      		cpi r24,-96
 1408 03e0 9105      		cpc r25,__zero_reg__
 1409 03e2 01F0      		breq .L71
 1410 03e4 803C      		cpi r24,-64
 1411 03e6 9105      		cpc r25,__zero_reg__
 1412 03e8 01F0      		breq .+2
 1413 03ea 00C0      		rjmp .L106
 1414 03ec 00C0      		rjmp .L72
 1415               	.L83:
 1416 03ee 823C      		cpi r24,-62
 1417 03f0 9105      		cpc r25,__zero_reg__
 1418 03f2 01F4      		brne .+2
 1419 03f4 00C0      		rjmp .L74
 1420 03f6 833C      		cpi r24,-61
 1421 03f8 9105      		cpc r25,__zero_reg__
 1422 03fa 01F0      		breq .+2
 1423 03fc 00C0      		rjmp .L106
 1424 03fe 00C0      		rjmp .L75
 1425               	.L82:
 1426 0400 833D      		cpi r24,-45
 1427 0402 9105      		cpc r25,__zero_reg__
 1428 0404 01F4      		brne .+2
 1429 0406 00C0      		rjmp .L79
 1430 0408 04F4      		brge .L84
 1431 040a 813D      		cpi r24,-47
 1432 040c 9105      		cpc r25,__zero_reg__
 1433 040e 01F4      		brne .+2
 1434 0410 00C0      		rjmp .L77
 1435 0412 823D      		cpi r24,-46
 1436 0414 9105      		cpc r25,__zero_reg__
 1437 0416 01F0      		breq .+2
 1438 0418 00C0      		rjmp .L106
 1439 041a 00C0      		rjmp .L78
 1440               	.L84:
 1441 041c 803E      		cpi r24,-32
 1442 041e 9105      		cpc r25,__zero_reg__
 1443 0420 01F0      		breq .L80
 1444 0422 813E      		cpi r24,-31
 1445 0424 9105      		cpc r25,__zero_reg__
 1446 0426 01F0      		breq .+2
 1447 0428 00C0      		rjmp .L106
 1448 042a 00C0      		rjmp .L81
 1449               	.L71:
 1450               	.LBB15:
 276:rev2.c        **** 			USART_TransmitChar(USART_HANDSHAKE);
 1451               		.stabn	68,0,276,.LM204-.LFBB6
 1452               	.LM204:
 1453 042c 81EA      		ldi r24,lo8(-95)
 1454 042e 00D0      		rcall USART_TransmitChar
GAS LISTING /tmp/ccvMAa46.s 			page 40


 277:rev2.c        **** 			break;
 1455               		.stabn	68,0,277,.LM205-.LFBB6
 1456               	.LM205:
 1457 0430 00C0      		rjmp .L106
 1458               	.L72:
 279:rev2.c        **** 			newData = USART_ReceiveData();
 1459               		.stabn	68,0,279,.LM206-.LFBB6
 1460               	.LM206:
 1461 0432 00D0      		rcall USART_ReceiveData
 1462 0434 6C01      		movw r12,r24
 280:rev2.c        **** 			if(newData > 2000)
 1463               		.stabn	68,0,280,.LM207-.LFBB6
 1464               	.LM207:
 1465 0436 91ED      		ldi r25,-47
 1466 0438 C916      		cp r12,r25
 1467 043a 97E0      		ldi r25,7
 1468 043c D906      		cpc r13,r25
 1469 043e 00F0      		brlo .+2
 1470 0440 00C0      		rjmp .L106
 283:rev2.c        **** 			transferToDAC(9,voltageSet/voltageSetMulti);
 1471               		.stabn	68,0,283,.LM208-.LFBB6
 1472               	.LM208:
 1473 0442 B601      		movw r22,r12
 1474 0444 80E0      		ldi r24,0
 1475 0446 90E0      		ldi r25,0
 1476 0448 00D0      		rcall __floatunsisf
 1477 044a 22EC      		ldi r18,lo8(-62)
 1478 044c 35E8      		ldi r19,lo8(-123)
 1479 044e 42E1      		ldi r20,lo8(18)
 1480 0450 50E4      		ldi r21,lo8(64)
 1481 0452 00D0      		rcall __divsf3
 1482 0454 00D0      		rcall __fixunssfsi
 1483 0456 89E0      		ldi r24,lo8(9)
 1484 0458 00D0      		rcall transferToDAC
 284:rev2.c        **** 			mapVoltage(voltageSet,cVoltageSet);
 1485               		.stabn	68,0,284,.LM209-.LFBB6
 1486               	.LM209:
 1487 045a 6BA9      		ldd r22,Y+51
 1488 045c 7CA9      		ldd r23,Y+52
 1489 045e C601      		movw r24,r12
 1490 0460 00D0      		rcall mapVoltage
 285:rev2.c        **** 			break;			
 1491               		.stabn	68,0,285,.LM210-.LFBB6
 1492               	.LM210:
 1493 0462 8601      		movw r16,r12
 1494 0464 00C0      		rjmp .L106
 1495               	.L76:
 287:rev2.c        **** 			USART_Transmit(voltageRead);
 1496               		.stabn	68,0,287,.LM211-.LFBB6
 1497               	.LM211:
 1498 0466 8FA5      		ldd r24,Y+47
 1499 0468 98A9      		ldd r25,Y+48
 1500 046a 00C0      		rjmp .L109
 1501               	.L80:
 290:rev2.c        **** 			USART_Transmit(voltageSet);
 1502               		.stabn	68,0,290,.LM212-.LFBB6
 1503               	.LM212:
GAS LISTING /tmp/ccvMAa46.s 			page 41


 1504 046c C801      		movw r24,r16
 1505 046e 00C0      		rjmp .L109
 1506               	.L73:
 293:rev2.c        **** 			newData = USART_ReceiveData();
 1507               		.stabn	68,0,293,.LM213-.LFBB6
 1508               	.LM213:
 1509 0470 00D0      		rcall USART_ReceiveData
 1510 0472 6C01      		movw r12,r24
 294:rev2.c        **** 			if(newData > 100)
 1511               		.stabn	68,0,294,.LM214-.LFBB6
 1512               	.LM214:
 1513 0474 8536      		cpi r24,101
 1514 0476 9105      		cpc r25,__zero_reg__
 1515 0478 00F0      		brlo .+2
 1516 047a 00C0      		rjmp .L106
 297:rev2.c        **** 			transferToDAC(10,currentSet/currentSetMulti);
 1517               		.stabn	68,0,297,.LM215-.LFBB6
 1518               	.LM215:
 1519 047c BC01      		movw r22,r24
 1520 047e 80E0      		ldi r24,0
 1521 0480 90E0      		ldi r25,0
 1522 0482 00D0      		rcall __floatunsisf
 1523 0484 24E1      		ldi r18,lo8(20)
 1524 0486 39E6      		ldi r19,lo8(105)
 1525 0488 49E0      		ldi r20,lo8(9)
 1526 048a 5EE3      		ldi r21,lo8(62)
 1527 048c 00D0      		rcall __divsf3
 1528 048e 00D0      		rcall __fixunssfsi
 1529 0490 8AE0      		ldi r24,lo8(10)
 1530 0492 00D0      		rcall transferToDAC
 298:rev2.c        **** 			mapCurrent(currentSet,cCurrentSet);
 1531               		.stabn	68,0,298,.LM216-.LFBB6
 1532               	.LM216:
 1533 0494 6DA9      		ldd r22,Y+53
 1534 0496 7EA9      		ldd r23,Y+54
 1535 0498 C601      		movw r24,r12
 1536 049a 00D0      		rcall mapCurrent
 299:rev2.c        **** 			break;			
 1537               		.stabn	68,0,299,.LM217-.LFBB6
 1538               	.LM217:
 1539 049c 7601      		movw r14,r12
 1540 049e 00C0      		rjmp .L106
 1541               	.L77:
 301:rev2.c        **** 			USART_Transmit(currentRead);
 1542               		.stabn	68,0,301,.LM218-.LFBB6
 1543               	.LM218:
 1544 04a0 89A9      		ldd r24,Y+49
 1545 04a2 9AA9      		ldd r25,Y+50
 1546 04a4 00C0      		rjmp .L109
 1547               	.L81:
 304:rev2.c        **** 			USART_Transmit(currentSet);
 1548               		.stabn	68,0,304,.LM219-.LFBB6
 1549               	.LM219:
 1550 04a6 C701      		movw r24,r14
 1551 04a8 00C0      		rjmp .L109
 1552               	.L78:
 307:rev2.c        **** 			USART_Transmit(vinRead);
GAS LISTING /tmp/ccvMAa46.s 			page 42


 1553               		.stabn	68,0,307,.LM220-.LFBB6
 1554               	.LM220:
 1555 04aa 8BAD      		ldd r24,Y+59
 1556 04ac 9CAD      		ldd r25,Y+60
 1557 04ae 00C0      		rjmp .L109
 1558               	.L79:
 310:rev2.c        **** 			USART_Transmit(preregRead);
 1559               		.stabn	68,0,310,.LM221-.LFBB6
 1560               	.LM221:
 1561 04b0 89AD      		ldd r24,Y+57
 1562 04b2 9AAD      		ldd r25,Y+58
 1563               	.L109:
 1564 04b4 00D0      		rcall USART_Transmit
 311:rev2.c        **** 			break;
 1565               		.stabn	68,0,311,.LM222-.LFBB6
 1566               	.LM222:
 1567 04b6 00C0      		rjmp .L106
 1568               	.L74:
 313:rev2.c        **** 			ENABLE_OUTPUT;
 1569               		.stabn	68,0,313,.LM223-.LFBB6
 1570               	.LM223:
 1571 04b8 C09A      		sbi 0x18,0
 1572 04ba 00C0      		rjmp .L108
 1573               	.L75:
 317:rev2.c        **** 			DISABLE_OUTPUT;
 1574               		.stabn	68,0,317,.LM224-.LFBB6
 1575               	.LM224:
 1576 04bc C098      		cbi 0x18,0
 1577               	.L108:
 318:rev2.c        **** 			MENU_Home(cVoltageRead,cCurrentRead);
 1578               		.stabn	68,0,318,.LM225-.LFBB6
 1579               	.LM225:
 1580 04be B301      		movw r22,r6
 1581 04c0 C401      		movw r24,r8
 1582 04c2 00D0      		rcall MENU_Home
 319:rev2.c        **** 			break;
 1583               		.stabn	68,0,319,.LM226-.LFBB6
 1584               	.LM226:
 1585 04c4 00C0      		rjmp .L106
 1586               	.LBE15:
 1587               	.LBE11:
 1588               		.size	main, .-main
 1589               		.stabs	"voltageAveraging:r(6,4)",64,0,59,4
 1590               		.stabs	"currentAveraging:r(6,4)",64,0,61,2
 1591               		.stabs	"preregRead:(6,4)",128,0,62,57
 1592               		.stabs	"preregAveraging:(6,4)",128,0,63,41
 1593               		.stabs	"vinRead:(6,4)",128,0,64,59
 1594               		.stabs	"vinAveraging:(6,4)",128,0,65,43
 1595               		.stabs	"cVoltageRead:(0,17)=ar(0,18)=r(0,18);0;0177777;;0;9;(0,11)",128,0,66,31
 1596               		.stabs	"cCurrentRead:(0,17)",128,0,68,21
 1597               		.stabs	"readCounter:(0,1)",128,0,71,45
 1598               		.stabs	"cVoltageSet:(0,17)",128,0,76,11
 1599               		.stabs	"cCurrentSet:(0,17)",128,0,78,1
 1600               		.stabn	192,0,0,.LFBB6-.LFBB6
 1601               		.stabs	"dir:r(0,11)",64,0,159,24
 1602               		.stabn	192,0,0,.LBB11-.LFBB6
 1603               		.stabn	224,0,0,.LBE11-.LFBB6
GAS LISTING /tmp/ccvMAa46.s 			page 43


 1604               		.stabn	224,0,0,.Lscope6-.LFBB6
 1605               	.Lscope6:
 1606               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 1607               		.stabd	78,0,0
 1608               	.global	backlight
 1609               		.data
 1610               		.type	backlight, @object
 1611               		.size	backlight, 1
 1612               	backlight:
 1613 0000 0A        		.byte	10
 1614               		.comm	SW_encoderState,1,1
 1615               		.stabs	"SW_encoderState:G(0,11)",32,0,47,0
 1616               		.stabs	"backlight:G(6,2)",32,0,11,0
 1617               		.text
 1618               		.stabs	"",100,0,0,.Letext0
 1619               	.Letext0:
 1620               		.ident	"GCC: (GNU) 4.7.2"
 1621               	.global __do_copy_data
 1622               	.global __do_clear_bss
GAS LISTING /tmp/ccvMAa46.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 rev2.c
     /tmp/ccvMAa46.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccvMAa46.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccvMAa46.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccvMAa46.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccvMAa46.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccvMAa46.s:87     .text:0000000000000000 transferToDAC
     /tmp/ccvMAa46.s:150    .text:000000000000002a mapVoltage
     /tmp/ccvMAa46.s:217    .text:0000000000000076 mapCurrent
     /tmp/ccvMAa46.s:269    .text:0000000000000096 MENU_Home
     /tmp/ccvMAa46.s:406    .text:0000000000000114 MENU_Backlight
     /tmp/ccvMAa46.s:1612   .data:0000000000000000 backlight
     /tmp/ccvMAa46.s:617    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 SW_encoderState

UNDEFINED SYMBOLS
__udivmodhi4
sprintf
LCD_Clear
LCD_Cursor
LCD_Write
encoderControls
SW_CheckEncoder
SW_Check1
SW_Check2
SW_Check3
SW_Check4
__floatunsisf
__divsf3
__fixunssfsi
__mulsf3
SW_Initialize
LCD_Initialize
ADC_initialize
USART_Initialize
LCD_HighLight
ADC_status
ADC_reading
USART_RecieveCommand
USART_TransmitChar
USART_ReceiveData
USART_Transmit
__do_copy_data
__do_clear_bss
